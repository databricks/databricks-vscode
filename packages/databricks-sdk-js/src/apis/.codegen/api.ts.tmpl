/* eslint-disable @typescript-eslint/naming-convention */

// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

import {ApiClient} from "../../api-client";
import * as model from "./model";
import Time from "../../retries/Time";
import retry from "../../retries/retries";
import {CancellationToken} from "../../types"
import {ApiError, ApiRetriableError} from "../apiError";
import {context, Context} from "../../context"
import {ExposedLoggers, withLogContext} from "../../logging";

{{range $i, $s := .Services }}
export class {{$s.PascalName}}RetriableError extends ApiRetriableError {
	constructor(method: string, message?: string){
		super("{{$s.PascalName}}", method, message)
	}
}
export class {{$s.PascalName}}Error extends ApiError {
	constructor(method: string, message?: string){
		super("{{$s.PascalName}}", method, message)
	}
}

/**
{{$s.Comment "* " 80}}
*/
export class {{$s.PascalName}}Service {
	constructor(readonly client: ApiClient){}

	{{- range $s.Methods}}
	/**
    {{.Comment "    * " 80}}
	*/
	@withLogContext(ExposedLoggers.SDK)
    async {{.CamelName}}({{if .Request}}request:  model.{{.Request.PascalName}},{{end}}
        @context context?: Context
	): Promise<model.{{if .Response}}{{.Response.PascalName}}{{else}}{{.EmptyResponseName.PascalName}}{{end}}> {
			const path = {{if .PathParts}}`{{range .PathParts}}{{.Prefix}}{{if .Field}}${request.{{.Field.SnakeName}}}{{end}}{{end}}`{{else}}"{{.Path}}"{{end}}
			return (await this.client.request(
				path,
				"{{.Verb}}",
				{{if .Request -}}request{{else}}undefined{{end}}, 
				context
			) as model.{{if .Response}}{{.Response.PascalName}}{{else}}{{.EmptyResponseName.PascalName}}{{end}})
		}

	{{if .Wait}}
	/**
	* {{.CamelName}} and wait to reach {{range $i, $e := .Wait.Success}}{{if $i}} or {{end}}{{.Content}}{{end}} state
	* {{if .Wait.Failure}} or fail on reaching {{range $i, $e := .Wait.Failure}}{{if $i}} or {{end}}{{.Content}}{{end}} state{{end}}
	*/
	@withLogContext(ExposedLoggers.SDK)
	async {{.CamelName}}AndWait({{if .Request}}{{.Request.CamelName}}: model.{{.Request.PascalName}}{{end}},
		options?: {
			timeout?: Time,
			onProgress?: (newPollResponse: model.{{if .Wait.Poll.Response}}{{.Wait.Poll.Response.PascalName}}{{else}}{{.Wait.Poll.EmptyResponseName.PascalName}}{{end}}) => Promise<void>
		},
		@context context?: Context	
	): Promise<model.{{if .Wait.Poll.Response}}{{.Wait.Poll.Response.PascalName}}{{else}}{{.Wait.Poll.EmptyResponseName.PascalName}}{{end}}> {

        options = options || {};
        options.onProgress =
            options.onProgress || (async (newPollResponse) => {});
		let {timeout, onProgress} = options;
		let cancellationToken = context?.cancellationToken;

		{{if .Wait.ForceBindRequest}}{{else if .Response}}const {{.Response.CamelName}} = {{end}}await this.{{.CamelName}}({{if .Request}}{{.Request.CamelName}},{{end}} context);

		return await retry<model.{{if .Wait.Poll.Response}}{{.Wait.Poll.Response.PascalName}}{{else}}{{.Wait.Poll.EmptyResponseName.PascalName}}{{end}}>({
			timeout,
			fn: async () => {
				const pollResponse = await this.{{.Wait.Poll.CamelName}}({ {{$e := .}}{{range .Wait.Binding}}
					{{.PollField.Name}}: {{.Bind.Of.CamelName}}.{{.Bind.Name}}!,{{end}}
				}, context)
				if(cancellationToken?.isCancellationRequested) {
					context?.logger?.error("{{$s.PascalName}}.{{.CamelName}}AndWait: cancelled");
					throw new {{$s.PascalName}}Error("{{.CamelName}}AndWait", "cancelled");
				}
				await onProgress(pollResponse);
				const status = pollResponse{{range $i, $e := .Wait.StatusPath}}{{if $i}}!{{end}}.{{$e.SnakeName}}{{end}}
				const statusMessage = pollResponse{{range $i, $e := .Wait.MessagePath}}{{if $i}}!{{end}}.{{$e.SnakeName}}{{end}}
				switch(status) {
					{{range $i, $e := .Wait.Success}}{{if $i}} {{end}}case '{{$e.Content}}':{{end}}{
						return pollResponse
					}
					{{if .Wait.Failure}}{{range $i, $e := .Wait.Failure}}{{if $i}} {{end}}case '{{$e.Content}}':{{end}}{
						const errorMessage = `failed to reach {{range $i, $e := .Wait.Success}}{{if $i}} or {{end}}{{.Content}}{{end}} state, got ${status}: ${statusMessage}`;
						context?.logger?.error(`{{$s.PascalName}}.{{.CamelName}}AndWait: ${errorMessage}`);
						throw new {{$s.PascalName}}Error("{{.CamelName}}AndWait", errorMessage);
					}
					{{end}}default:{
						const errorMessage = `failed to reach {{range $i, $e := .Wait.Success}}{{if $i}} or {{end}}{{.Content}}{{end}} state, got ${status}: ${statusMessage}`;
						context?.logger?.error(`{{$s.PascalName}}.{{.CamelName}}AndWait: retrying: ${errorMessage}`);
						throw new {{$s.PascalName}}RetriableError("{{.CamelName}}AndWait", errorMessage);
					}
				}
			}
		});
	}
	{{end}}
	{{end}}
}
{{end}}
