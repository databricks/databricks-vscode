/* eslint-disable @typescript-eslint/naming-convention */

// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

// all definitions in this file are in alphabetical order
{{range .Types}}{{.Comment "// " 80}}
{{if .Fields}}export interface {{.PascalName}} {
    {{range .Fields}}
    {{.Comment "    // " 80}}
    {{.SnakeName}}{{if .IsOptionalObject}}?{{end}}: {{template "type" .Entity}};{{end}}
}
export const Default{{.PascalName}} {{if .HasBooleanField}}: Pick<{{.PascalName}}, {{- range $i, $f := .Fields -}}
	{{- if and $f.Entity $f.Entity.IsBool -}}{{if $i}} |{{end}}"{{$f.SnakeName}}"{{end}}{{end}}>{{end}} = {
	{{- range .Fields -}}
	{{if and .Entity .Entity.IsBool}}{{.SnakeName}}: false,{{end}}
	{{end}}
}
{{else if .Enum}}export type {{.PascalName}} = 
{{range $i, $e:=.Enum }}{{if $e.Comment "// " 80}}{{$e.Comment "// " 80}}
{{end}}{{if $i}} |{{end}}"{{$e.Content}}"
{{end}};
{{end}}
{{end}}

{{range .EmptyTypes}}export interface {{.PascalName}}{};
{{end}}

{{- define "type" -}}
	{{- if not . }}any /* ERROR */
	{{- else if .IsString}}string
	{{- else if .IsBool}}boolean
	{{- else if .IsInt64}}number
	{{- else if .IsFloat64}}number
	{{- else if .IsInt}}number
	{{- else if .ArrayValue }}{{template "type" .ArrayValue}}[]
	{{- else if .MapValue }}Record<string, {{template "type" .MapValue}}>
	{{- else if .IsObject }}{{.PascalName}}
	{{- else if .Enum }}{{.PascalName}}
	{{- else}}any /* MISSING TYPE */
	{{- end -}}
{{- end -}}
