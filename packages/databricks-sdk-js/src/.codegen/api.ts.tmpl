/* eslint-disable @typescript-eslint/naming-convention */

// Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

import {ApiClient} from "../../api-client";
import * as model from "./model";
import Time from "../../retries/Time";
import retry from "../../retries/retries";
import {CancellationToken} from "../../types"
import {ApiError, ApiRetriableError} from "../apiError";
import {context, Context} from "../../context"
import {ExposedLoggers, withLogContext} from "../../logging";
import {Waiter, asWaiter} from "../../wait";

{{range $i, $s := .Services }}
export class {{$s.PascalName}}RetriableError extends ApiRetriableError {
	constructor(method: string, message?: string){
		super("{{$s.PascalName}}", method, message)
	}
}
export class {{$s.PascalName}}Error extends ApiError {
	constructor(method: string, message?: string){
		super("{{$s.PascalName}}", method, message)
	}
}

/**
{{$s.Comment "* " 80}}
*/
export class {{$s.PascalName}}Service {
	constructor(readonly client: ApiClient){}

	{{- range $s.Methods}}

	@withLogContext(ExposedLoggers.SDK)
    private async _{{.CamelName}}({{if .Request}}request:  model.{{.Request.PascalName}},{{end}}
        @context context?: Context
	): Promise<{{template "type_for_response" .}}> 
	
	{
		const path = {{if .PathParts -}}
			`{{range  .PathParts}}{{.Prefix}}{{if .Field}}${request.{{.Field.Name}}}{{ else if .IsAccountId }}${this.client.accountId}{{end}}{{ end }}`
		{{- else}}"{{.Path}}"{{end}}
		return (await this.client.request(
			path,
			"{{.Verb}}",
			{{if .Request -}}request{{else}}undefined{{end}}, 
			context
		) as {{if .Response}}{{if .Response.ArrayValue}}Array<model.{{.Response.ArrayValue.PascalName}}>{{else}}model.{{.Response.PascalName}}{{end}}{{else}}model.EmptyResponse{{end}})
	}	

	{{if .Wait}}
	/**
    {{.Comment "    * " 80}}
	*/
	@withLogContext(ExposedLoggers.SDK)
	async {{.CamelName}}({{if .Request}}{{.Request.CamelName}}: model.{{.Request.PascalName}}{{end}},
		@context context?: Context	
	): Promise<Waiter<{{template "type_for_response" .}}, {{template "type_for_poll_response" .}}>> {
		let cancellationToken = context?.cancellationToken;

		{{if .Response}}const {{.Response.CamelName}} = {{end}}await this._{{.CamelName}}({{if .Request}}{{.Request.CamelName}},{{end}} context);

		return asWaiter({{ if .Response}}{{.Response.CamelName}}{{ else }}null{{end}}, async(options) => { 
			options = options || {};
			options.onProgress =
				options.onProgress || (async (newPollResponse) => {});
			let {timeout, onProgress} = options;

			return await retry<{{template "type_for_poll_response" .}}>({
				timeout,
				fn: async () => {
					const pollResponse = await this.{{.Wait.Poll.CamelName}}({
						{{range .Wait.Binding}}{{.PollField.Name}}: {{.Bind.Of.CamelName}}.{{.Bind.Name}}!,{{end}}
					}, context)
					if(cancellationToken?.isCancellationRequested) {
						context?.logger?.error("{{$s.PascalName}}.{{.CamelName}}AndWait: cancelled");
						throw new {{$s.PascalName}}Error("{{.CamelName}}AndWait", "cancelled");
					}
					await onProgress(pollResponse);
					const status = pollResponse{{range $i, $e := .Wait.StatusPath}}{{if $i}}!{{end}}.{{$e.SnakeName}}{{end}}
					const statusMessage = pollResponse{{range $i, $e := .Wait.MessagePath}}{{if $i}}!{{end}}.{{$e.SnakeName}}{{end}}
					switch(status) {
						{{range $i, $e := .Wait.Success}}{{if $i}} {{end}}case '{{$e.Content}}':{{end}}{
							return pollResponse
						}
						{{if .Wait.Failure}}{{range $i, $e := .Wait.Failure}}{{if $i}} {{end}}case '{{$e.Content}}':{{end}}{
							const errorMessage = `failed to reach {{range $i, $e := .Wait.Success}}{{if $i}} or {{end}}{{.Content}}{{end}} state, got ${status}: ${statusMessage}`;
							context?.logger?.error(`{{$s.PascalName}}.{{.CamelName}}AndWait: ${errorMessage}`);
							throw new {{$s.PascalName}}Error("{{.CamelName}}AndWait", errorMessage);
						}
						{{end}}default:{
							const errorMessage = `failed to reach {{range $i, $e := .Wait.Success}}{{if $i}} or {{end}}{{.Content}}{{end}} state, got ${status}: ${statusMessage}`;
							context?.logger?.error(`{{$s.PascalName}}.{{.CamelName}}AndWait: retrying: ${errorMessage}`);
							throw new {{$s.PascalName}}RetriableError("{{.CamelName}}AndWait", errorMessage);
						}
					}
				}
			});
		});
	}
	{{ else }}
	/**
    {{.Comment "    * " 80}}
	*/
	@withLogContext(ExposedLoggers.SDK)
    async {{.CamelName}}({{if .Request}}request:  model.{{.Request.PascalName}},{{end}}
        @context context?: Context
	): Promise<{{template "type_for_response" .}}> 	
	{
		return await this._{{.CamelName}}({{if .Request}}request,{{end}} context);
	}	
	{{end}}
	{{end}}
}
{{end}}

{{- define "type_for_response" -}}
	{{if .Response}}
        {{if .Response.ArrayValue}}
            Array<model.{{.Response.ArrayValue.PascalName}}>
        {{else}}
            model.{{.Response.PascalName}}
        {{end}}
	{{else}}
        model.EmptyResponse
	{{end}}
{{- end -}}

{{- define "type_for_poll_response" -}}
model.{{if .Wait.Poll.Response}}{{.Wait.Poll.Response.PascalName}}{{else}}{{.Wait.Poll.EmptyResponseName.PascalName}}{{end}}
{{- end -}}