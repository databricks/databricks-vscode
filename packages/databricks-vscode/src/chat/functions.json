[
  {
    "name": "account_access-control_get-assignable-roles-for-resource",
    "description": "Get assignable roles for a resource.",
    "parameters": {
      "type": "object",
      "properties": {
        "RESOURCE": {
          "type": "string",
          "description": "RESOURCE"
        }
      }
    },
    "required": [
      "RESOURCE"
    ]
  },
  {
    "name": "account_access-control_get-rule-set",
    "description": "Get a rule set.",
    "parameters": {
      "type": "object",
      "properties": {
        "ETAG": {
          "type": "string",
          "description": "ETAG"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME",
      "ETAG"
    ]
  },
  {
    "name": "account_access-control_update-rule-set",
    "description": "Update a rule set.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "account_billable-usage_download",
    "description": "Return billable usage logs.",
    "parameters": {
      "type": "object",
      "properties": {
        "END_MONTH": {
          "type": "string",
          "description": "END_MONTH"
        },
        "START_MONTH": {
          "type": "string",
          "description": "START_MONTH"
        },
        "personal-data": {
          "type": "boolean",
          "description": "Specify whether to include personally identifiable information in the billable usage logs, for example the email addresses of cluster creators."
        }
      }
    },
    "required": [
      "START_MONTH",
      "END_MONTH"
    ]
  },
  {
    "name": "account_credentials_create",
    "description": "Create credential configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "account_credentials_delete",
    "description": "Delete credential configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "CREDENTIALS_ID": {
          "type": "string",
          "description": "CREDENTIALS_ID"
        }
      }
    },
    "required": [
      "CREDENTIALS_ID"
    ]
  },
  {
    "name": "account_credentials_get",
    "description": "Get credential configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "CREDENTIALS_ID": {
          "type": "string",
          "description": "CREDENTIALS_ID"
        }
      }
    },
    "required": [
      "CREDENTIALS_ID"
    ]
  },
  {
    "name": "account_credentials_list",
    "description": "Get all credential configurations.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "account_custom-app-integration_create",
    "description": "Create Custom OAuth App Integration.",
    "parameters": {
      "type": "object",
      "properties": {
        "confidential": {
          "type": "boolean",
          "description": "indicates if an oauth client-secret should be generated."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "account_custom-app-integration_delete",
    "description": "Delete Custom OAuth App Integration.",
    "parameters": {
      "type": "object",
      "properties": {
        "INTEGRATION_ID": {
          "type": "string",
          "description": "INTEGRATION_ID"
        }
      }
    },
    "required": [
      "INTEGRATION_ID"
    ]
  },
  {
    "name": "account_custom-app-integration_get",
    "description": "Get OAuth Custom App Integration.",
    "parameters": {
      "type": "object",
      "properties": {
        "INTEGRATION_ID": {
          "type": "string",
          "description": "INTEGRATION_ID"
        }
      }
    },
    "required": [
      "INTEGRATION_ID"
    ]
  },
  {
    "name": "account_custom-app-integration_list",
    "description": "Get custom oauth app integrations.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "account_custom-app-integration_update",
    "description": "Updates Custom OAuth App Integration.",
    "parameters": {
      "type": "object",
      "properties": {
        "INTEGRATION_ID": {
          "type": "string",
          "description": "INTEGRATION_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "INTEGRATION_ID"
    ]
  },
  {
    "name": "account_encryption-keys_create",
    "description": "Create encryption key configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "account_encryption-keys_delete",
    "description": "Delete encryption key configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "CUSTOMER_MANAGED_KEY_ID": {
          "type": "string",
          "description": "CUSTOMER_MANAGED_KEY_ID"
        }
      }
    },
    "required": [
      "CUSTOMER_MANAGED_KEY_ID"
    ]
  },
  {
    "name": "account_encryption-keys_get",
    "description": "Get encryption key configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "CUSTOMER_MANAGED_KEY_ID": {
          "type": "string",
          "description": "CUSTOMER_MANAGED_KEY_ID"
        }
      }
    },
    "required": [
      "CUSTOMER_MANAGED_KEY_ID"
    ]
  },
  {
    "name": "account_encryption-keys_list",
    "description": "Get all encryption key configurations.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "account_groups_create",
    "description": "Create a new group.",
    "parameters": {
      "type": "object",
      "properties": {
        "display-name": {
          "type": "string",
          "description": "String that represents a human-readable group name."
        },
        "external-id": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Databricks group ID."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "account_groups_delete",
    "description": "Delete a group.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "account_groups_get",
    "description": "Get group details.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "account_groups_list",
    "description": "List group details.",
    "parameters": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to return in response."
        },
        "count": {
          "type": "integer",
          "description": "Desired number of results per page."
        },
        "excluded-attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to exclude in response."
        },
        "filter": {
          "type": "string",
          "description": "Query by which the results have to be filtered."
        },
        "sort-by": {
          "type": "string",
          "description": "Attribute to sort the results."
        },
        "sort-order": {
          "type": "string",
          "description": "The order to sort the results."
        },
        "start-index": {
          "type": "integer",
          "description": "Specifies the index of the first result."
        }
      }
    }
  },
  {
    "name": "account_groups_patch",
    "description": "Update group details.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "account_groups_update",
    "description": "Replace a group.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "display-name": {
          "type": "string",
          "description": "String that represents a human-readable group name."
        },
        "external-id": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Databricks group ID."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "account_ip-access-lists_create",
    "description": "Create access list.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "account_ip-access-lists_delete",
    "description": "Delete access list.",
    "parameters": {
      "type": "object",
      "properties": {
        "IP_ACCESS_LIST_ID": {
          "type": "string",
          "description": "IP_ACCESS_LIST_ID"
        }
      }
    },
    "required": [
      "IP_ACCESS_LIST_ID"
    ]
  },
  {
    "name": "account_ip-access-lists_get",
    "description": "Get IP access list.",
    "parameters": {
      "type": "object",
      "properties": {
        "IP_ACCESS_LIST_ID": {
          "type": "string",
          "description": "IP_ACCESS_LIST_ID"
        }
      }
    },
    "required": [
      "IP_ACCESS_LIST_ID"
    ]
  },
  {
    "name": "account_ip-access-lists_list",
    "description": "Get access lists.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "account_ip-access-lists_replace",
    "description": "Replace access list.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "list-id": {
          "type": "string",
          "description": "Universally unique identifier (UUID) of the IP access list."
        }
      }
    }
  },
  {
    "name": "account_ip-access-lists_update",
    "description": "Update access list.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "list-id": {
          "type": "string",
          "description": "Universally unique identifier (UUID) of the IP access list."
        }
      }
    }
  },
  {
    "name": "account_log-delivery_create",
    "description": "Create a new log delivery configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "account_log-delivery_get",
    "description": "Get log delivery configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "LOG_DELIVERY_CONFIGURATION_ID": {
          "type": "string",
          "description": "LOG_DELIVERY_CONFIGURATION_ID"
        }
      }
    },
    "required": [
      "LOG_DELIVERY_CONFIGURATION_ID"
    ]
  },
  {
    "name": "account_log-delivery_list",
    "description": "Get all log delivery configurations.",
    "parameters": {
      "type": "object",
      "properties": {
        "credentials-id": {
          "type": "string",
          "description": "Filter by credential configuration ID."
        },
        "status": {
          "type": "string",
          "description": "Filter by status ENABLED or DISABLED."
        },
        "storage-configuration-id": {
          "type": "string",
          "description": "Filter by storage configuration ID."
        }
      }
    }
  },
  {
    "name": "account_log-delivery_patch-status",
    "description": "Enable or disable log delivery configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "LOG_DELIVERY_CONFIGURATION_ID": {
          "type": "string",
          "description": "LOG_DELIVERY_CONFIGURATION_ID"
        },
        "STATUS": {
          "type": "string",
          "description": "STATUS"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "LOG_DELIVERY_CONFIGURATION_ID",
      "STATUS"
    ]
  },
  {
    "name": "account_metastore-assignments_create",
    "description": "Assigns a workspace to a metastore.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        },
        "WORKSPACE_ID": {
          "type": "string",
          "description": "WORKSPACE_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "WORKSPACE_ID",
      "METASTORE_ID"
    ]
  },
  {
    "name": "account_metastore-assignments_delete",
    "description": "Delete a metastore assignment.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        },
        "WORKSPACE_ID": {
          "type": "string",
          "description": "WORKSPACE_ID"
        }
      }
    },
    "required": [
      "WORKSPACE_ID",
      "METASTORE_ID"
    ]
  },
  {
    "name": "account_metastore-assignments_get",
    "description": "Gets the metastore assignment for a workspace.",
    "parameters": {
      "type": "object",
      "properties": {
        "WORKSPACE_ID": {
          "type": "string",
          "description": "WORKSPACE_ID"
        }
      }
    },
    "required": [
      "WORKSPACE_ID"
    ]
  },
  {
    "name": "account_metastore-assignments_list",
    "description": "Get all workspaces assigned to a metastore.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        }
      }
    },
    "required": [
      "METASTORE_ID"
    ]
  },
  {
    "name": "account_metastore-assignments_update",
    "description": "Updates a metastore assignment to a workspaces.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        },
        "WORKSPACE_ID": {
          "type": "string",
          "description": "WORKSPACE_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "WORKSPACE_ID",
      "METASTORE_ID"
    ]
  },
  {
    "name": "account_metastores_create",
    "description": "Create metastore.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "account_metastores_delete",
    "description": "Delete a metastore.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        },
        "force": {
          "type": "boolean",
          "description": "Force deletion even if the metastore is not empty."
        }
      }
    },
    "required": [
      "METASTORE_ID"
    ]
  },
  {
    "name": "account_metastores_get",
    "description": "Get a metastore.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        }
      }
    },
    "required": [
      "METASTORE_ID"
    ]
  },
  {
    "name": "account_metastores_list",
    "description": "Get all metastores associated with an account.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "account_metastores_update",
    "description": "Update a metastore.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "METASTORE_ID"
    ]
  },
  {
    "name": "account_network-connectivity_create-network-connectivity-configuration",
    "description": "Create a network connectivity configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "REGION": {
          "type": "string",
          "description": "REGION"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME",
      "REGION"
    ]
  },
  {
    "name": "account_network-connectivity_create-private-endpoint-rule",
    "description": "Create a private endpoint rule.",
    "parameters": {
      "type": "object",
      "properties": {
        "GROUP_ID": {
          "type": "string",
          "description": "GROUP_ID"
        },
        "NETWORK_CONNECTIVITY_CONFIG_ID": {
          "type": "string",
          "description": "NETWORK_CONNECTIVITY_CONFIG_ID"
        },
        "RESOURCE_ID": {
          "type": "string",
          "description": "RESOURCE_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NETWORK_CONNECTIVITY_CONFIG_ID",
      "RESOURCE_ID",
      "GROUP_ID"
    ]
  },
  {
    "name": "account_network-connectivity_delete-network-connectivity-configuration",
    "description": "Delete a network connectivity configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "NETWORK_CONNECTIVITY_CONFIG_ID": {
          "type": "string",
          "description": "NETWORK_CONNECTIVITY_CONFIG_ID"
        }
      }
    },
    "required": [
      "NETWORK_CONNECTIVITY_CONFIG_ID"
    ]
  },
  {
    "name": "account_network-connectivity_delete-private-endpoint-rule",
    "description": "Delete a private endpoint rule.",
    "parameters": {
      "type": "object",
      "properties": {
        "NETWORK_CONNECTIVITY_CONFIG_ID": {
          "type": "string",
          "description": "NETWORK_CONNECTIVITY_CONFIG_ID"
        },
        "PRIVATE_ENDPOINT_RULE_ID": {
          "type": "string",
          "description": "PRIVATE_ENDPOINT_RULE_ID"
        }
      }
    },
    "required": [
      "NETWORK_CONNECTIVITY_CONFIG_ID",
      "PRIVATE_ENDPOINT_RULE_ID"
    ]
  },
  {
    "name": "account_network-connectivity_get-network-connectivity-configuration",
    "description": "Get a network connectivity configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "NETWORK_CONNECTIVITY_CONFIG_ID": {
          "type": "string",
          "description": "NETWORK_CONNECTIVITY_CONFIG_ID"
        }
      }
    },
    "required": [
      "NETWORK_CONNECTIVITY_CONFIG_ID"
    ]
  },
  {
    "name": "account_network-connectivity_get-private-endpoint-rule",
    "description": "Get a private endpoint rule.",
    "parameters": {
      "type": "object",
      "properties": {
        "NETWORK_CONNECTIVITY_CONFIG_ID": {
          "type": "string",
          "description": "NETWORK_CONNECTIVITY_CONFIG_ID"
        },
        "PRIVATE_ENDPOINT_RULE_ID": {
          "type": "string",
          "description": "PRIVATE_ENDPOINT_RULE_ID"
        }
      }
    },
    "required": [
      "NETWORK_CONNECTIVITY_CONFIG_ID",
      "PRIVATE_ENDPOINT_RULE_ID"
    ]
  },
  {
    "name": "account_networks_create",
    "description": "Create network configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "NETWORK_NAME": {
          "type": "string",
          "description": "NETWORK_NAME"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "vpc-id": {
          "type": "string",
          "description": "The ID of the VPC associated with this network."
        }
      }
    },
    "required": [
      "NETWORK_NAME"
    ]
  },
  {
    "name": "account_networks_delete",
    "description": "Delete a network configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "NETWORK_ID": {
          "type": "string",
          "description": "NETWORK_ID"
        }
      }
    },
    "required": [
      "NETWORK_ID"
    ]
  },
  {
    "name": "account_networks_get",
    "description": "Get a network configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "NETWORK_ID": {
          "type": "string",
          "description": "NETWORK_ID"
        }
      }
    },
    "required": [
      "NETWORK_ID"
    ]
  },
  {
    "name": "account_networks_list",
    "description": "Get all network configurations.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "account_o-auth-published-apps_list",
    "description": "Get all the published OAuth apps.",
    "parameters": {
      "type": "object",
      "properties": {
        "page-size": {
          "type": "integer",
          "description": "The max number of OAuth published apps to return."
        },
        "page-token": {
          "type": "string",
          "description": "A token that can be used to get the next page of results."
        }
      }
    }
  },
  {
    "name": "account_private-access_create",
    "description": "Create private access settings.",
    "parameters": {
      "type": "object",
      "properties": {
        "PRIVATE_ACCESS_SETTINGS_NAME": {
          "type": "string",
          "description": "PRIVATE_ACCESS_SETTINGS_NAME"
        },
        "REGION": {
          "type": "string",
          "description": "REGION"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "private-access-level": {
          "type": "string",
          "description": "The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object."
        },
        "public-access-enabled": {
          "type": "boolean",
          "description": "Determines if the workspace can be accessed over public internet."
        }
      }
    },
    "required": [
      "PRIVATE_ACCESS_SETTINGS_NAME",
      "REGION"
    ]
  },
  {
    "name": "account_private-access_delete",
    "description": "Delete a private access settings object.",
    "parameters": {
      "type": "object",
      "properties": {
        "PRIVATE_ACCESS_SETTINGS_ID": {
          "type": "string",
          "description": "PRIVATE_ACCESS_SETTINGS_ID"
        }
      }
    },
    "required": [
      "PRIVATE_ACCESS_SETTINGS_ID"
    ]
  },
  {
    "name": "account_private-access_get",
    "description": "Get a private access settings object.",
    "parameters": {
      "type": "object",
      "properties": {
        "PRIVATE_ACCESS_SETTINGS_ID": {
          "type": "string",
          "description": "PRIVATE_ACCESS_SETTINGS_ID"
        }
      }
    },
    "required": [
      "PRIVATE_ACCESS_SETTINGS_ID"
    ]
  },
  {
    "name": "account_private-access_list",
    "description": "Get all private access settings objects.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "account_private-access_replace",
    "description": "Replace private access settings.",
    "parameters": {
      "type": "object",
      "properties": {
        "PRIVATE_ACCESS_SETTINGS_ID": {
          "type": "string",
          "description": "PRIVATE_ACCESS_SETTINGS_ID"
        },
        "PRIVATE_ACCESS_SETTINGS_NAME": {
          "type": "string",
          "description": "PRIVATE_ACCESS_SETTINGS_NAME"
        },
        "REGION": {
          "type": "string",
          "description": "REGION"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "private-access-level": {
          "type": "string",
          "description": "The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object."
        },
        "public-access-enabled": {
          "type": "boolean",
          "description": "Determines if the workspace can be accessed over public internet."
        }
      }
    },
    "required": [
      "PRIVATE_ACCESS_SETTINGS_ID",
      "PRIVATE_ACCESS_SETTINGS_NAME",
      "REGION"
    ]
  },
  {
    "name": "account_published-app-integration_create",
    "description": "Create Published OAuth App Integration.",
    "parameters": {
      "type": "object",
      "properties": {
        "app-id": {
          "type": "string",
          "description": "app_id of the oauth published app integration."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "account_published-app-integration_delete",
    "description": "Delete Published OAuth App Integration.",
    "parameters": {
      "type": "object",
      "properties": {
        "INTEGRATION_ID": {
          "type": "string",
          "description": "INTEGRATION_ID"
        }
      }
    },
    "required": [
      "INTEGRATION_ID"
    ]
  },
  {
    "name": "account_published-app-integration_get",
    "description": "Get OAuth Published App Integration.",
    "parameters": {
      "type": "object",
      "properties": {
        "INTEGRATION_ID": {
          "type": "string",
          "description": "INTEGRATION_ID"
        }
      }
    },
    "required": [
      "INTEGRATION_ID"
    ]
  },
  {
    "name": "account_published-app-integration_list",
    "description": "Get published oauth app integrations.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "account_published-app-integration_update",
    "description": "Updates Published OAuth App Integration.",
    "parameters": {
      "type": "object",
      "properties": {
        "INTEGRATION_ID": {
          "type": "string",
          "description": "INTEGRATION_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "INTEGRATION_ID"
    ]
  },
  {
    "name": "account_service-principal-secrets_create",
    "description": "Create service principal secret.",
    "parameters": {
      "type": "object",
      "properties": {
        "SERVICE_PRINCIPAL_ID": {
          "type": "string",
          "description": "SERVICE_PRINCIPAL_ID"
        }
      }
    },
    "required": [
      "SERVICE_PRINCIPAL_ID"
    ]
  },
  {
    "name": "account_service-principal-secrets_delete",
    "description": "Delete service principal secret.",
    "parameters": {
      "type": "object",
      "properties": {
        "SECRET_ID": {
          "type": "string",
          "description": "SECRET_ID"
        },
        "SERVICE_PRINCIPAL_ID": {
          "type": "string",
          "description": "SERVICE_PRINCIPAL_ID"
        }
      }
    },
    "required": [
      "SERVICE_PRINCIPAL_ID",
      "SECRET_ID"
    ]
  },
  {
    "name": "account_service-principal-secrets_list",
    "description": "List service principal secrets.",
    "parameters": {
      "type": "object",
      "properties": {
        "SERVICE_PRINCIPAL_ID": {
          "type": "string",
          "description": "SERVICE_PRINCIPAL_ID"
        }
      }
    },
    "required": [
      "SERVICE_PRINCIPAL_ID"
    ]
  },
  {
    "name": "account_service-principals_create",
    "description": "Create a service principal.",
    "parameters": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "If this user is active."
        },
        "application-id": {
          "type": "string",
          "description": "UUID relating to the service principal."
        },
        "display-name": {
          "type": "string",
          "description": "String that represents a concatenation of given and family names."
        },
        "external-id": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Databricks service principal ID."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "account_service-principals_delete",
    "description": "Delete a service principal.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "account_service-principals_get",
    "description": "Get service principal details.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "account_service-principals_list",
    "description": "List service principals.",
    "parameters": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to return in response."
        },
        "count": {
          "type": "integer",
          "description": "Desired number of results per page."
        },
        "excluded-attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to exclude in response."
        },
        "filter": {
          "type": "string",
          "description": "Query by which the results have to be filtered."
        },
        "sort-by": {
          "type": "string",
          "description": "Attribute to sort the results."
        },
        "sort-order": {
          "type": "string",
          "description": "The order to sort the results."
        },
        "start-index": {
          "type": "integer",
          "description": "Specifies the index of the first result."
        }
      }
    }
  },
  {
    "name": "account_service-principals_patch",
    "description": "Update service principal details.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "account_service-principals_update",
    "description": "Replace service principal.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "active": {
          "type": "boolean",
          "description": "If this user is active."
        },
        "application-id": {
          "type": "string",
          "description": "UUID relating to the service principal."
        },
        "display-name": {
          "type": "string",
          "description": "String that represents a concatenation of given and family names."
        },
        "external-id": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Databricks service principal ID."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "account_storage_create",
    "description": "Create new storage configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "account_storage_delete",
    "description": "Delete storage configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "STORAGE_CONFIGURATION_ID": {
          "type": "string",
          "description": "STORAGE_CONFIGURATION_ID"
        }
      }
    },
    "required": [
      "STORAGE_CONFIGURATION_ID"
    ]
  },
  {
    "name": "account_storage_get",
    "description": "Get storage configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "STORAGE_CONFIGURATION_ID": {
          "type": "string",
          "description": "STORAGE_CONFIGURATION_ID"
        }
      }
    },
    "required": [
      "STORAGE_CONFIGURATION_ID"
    ]
  },
  {
    "name": "account_storage_list",
    "description": "Get all storage configurations.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "account_storage-credentials_create",
    "description": "Create a storage credential.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "METASTORE_ID"
    ]
  },
  {
    "name": "account_storage-credentials_delete",
    "description": "Delete a storage credential.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        },
        "STORAGE_CREDENTIAL_NAME": {
          "type": "string",
          "description": "STORAGE_CREDENTIAL_NAME"
        },
        "force": {
          "type": "boolean",
          "description": "Force deletion even if the Storage Credential is not empty."
        }
      }
    },
    "required": [
      "METASTORE_ID",
      "STORAGE_CREDENTIAL_NAME"
    ]
  },
  {
    "name": "account_storage-credentials_get",
    "description": "Gets the named storage credential.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        },
        "STORAGE_CREDENTIAL_NAME": {
          "type": "string",
          "description": "STORAGE_CREDENTIAL_NAME"
        }
      }
    },
    "required": [
      "METASTORE_ID",
      "STORAGE_CREDENTIAL_NAME"
    ]
  },
  {
    "name": "account_storage-credentials_list",
    "description": "Get all storage credentials assigned to a metastore.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        }
      }
    },
    "required": [
      "METASTORE_ID"
    ]
  },
  {
    "name": "account_storage-credentials_update",
    "description": "Updates a storage credential.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        },
        "STORAGE_CREDENTIAL_NAME": {
          "type": "string",
          "description": "STORAGE_CREDENTIAL_NAME"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "METASTORE_ID",
      "STORAGE_CREDENTIAL_NAME"
    ]
  },
  {
    "name": "account_users_create",
    "description": "Create a new user.",
    "parameters": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "If this user is active."
        },
        "display-name": {
          "type": "string",
          "description": "String that represents a concatenation of given and family names."
        },
        "external-id": {
          "type": "string",
          "description": "External ID is not currently supported."
        },
        "id": {
          "type": "string",
          "description": "Databricks user ID."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "user-name": {
          "type": "string",
          "description": "Email address of the Databricks user."
        }
      }
    }
  },
  {
    "name": "account_users_delete",
    "description": "Delete a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "account_users_get",
    "description": "Get user details.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to return in response."
        },
        "count": {
          "type": "integer",
          "description": "Desired number of results per page."
        },
        "excluded-attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to exclude in response."
        },
        "filter": {
          "type": "string",
          "description": "Query by which the results have to be filtered."
        },
        "sort-by": {
          "type": "string",
          "description": "Attribute to sort the results."
        },
        "sort-order": {
          "type": "string",
          "description": "The order to sort the results."
        },
        "start-index": {
          "type": "integer",
          "description": "Specifies the index of the first result."
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "account_users_list",
    "description": "List users.",
    "parameters": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to return in response."
        },
        "count": {
          "type": "integer",
          "description": "Desired number of results per page."
        },
        "excluded-attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to exclude in response."
        },
        "filter": {
          "type": "string",
          "description": "Query by which the results have to be filtered."
        },
        "sort-by": {
          "type": "string",
          "description": "Attribute to sort the results."
        },
        "sort-order": {
          "type": "string",
          "description": "The order to sort the results."
        },
        "start-index": {
          "type": "integer",
          "description": "Specifies the index of the first result."
        }
      }
    }
  },
  {
    "name": "account_users_patch",
    "description": "Update user details.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "account_users_update",
    "description": "Replace a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "active": {
          "type": "boolean",
          "description": "If this user is active."
        },
        "display-name": {
          "type": "string",
          "description": "String that represents a concatenation of given and family names."
        },
        "external-id": {
          "type": "string",
          "description": "External ID is not currently supported."
        },
        "id": {
          "type": "string",
          "description": "Databricks user ID."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "user-name": {
          "type": "string",
          "description": "Email address of the Databricks user."
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "account_vpc-endpoints_create",
    "description": "Create VPC endpoint configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "VPC_ENDPOINT_NAME": {
          "type": "string",
          "description": "VPC_ENDPOINT_NAME"
        },
        "aws-vpc-endpoint-id": {
          "type": "string",
          "description": "The ID of the VPC endpoint object in AWS."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "region": {
          "type": "string",
          "description": "The AWS region in which this VPC endpoint object exists."
        }
      }
    },
    "required": [
      "VPC_ENDPOINT_NAME"
    ]
  },
  {
    "name": "account_vpc-endpoints_delete",
    "description": "Delete VPC endpoint configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "VPC_ENDPOINT_ID": {
          "type": "string",
          "description": "VPC_ENDPOINT_ID"
        }
      }
    },
    "required": [
      "VPC_ENDPOINT_ID"
    ]
  },
  {
    "name": "account_vpc-endpoints_get",
    "description": "Get a VPC endpoint configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "VPC_ENDPOINT_ID": {
          "type": "string",
          "description": "VPC_ENDPOINT_ID"
        }
      }
    },
    "required": [
      "VPC_ENDPOINT_ID"
    ]
  },
  {
    "name": "account_vpc-endpoints_list",
    "description": "Get all VPC endpoint configurations.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "account_workspace-assignment_delete",
    "description": "Delete permissions assignment.",
    "parameters": {
      "type": "object",
      "properties": {
        "PRINCIPAL_ID": {
          "type": "string",
          "description": "PRINCIPAL_ID"
        },
        "WORKSPACE_ID": {
          "type": "string",
          "description": "WORKSPACE_ID"
        }
      }
    },
    "required": [
      "WORKSPACE_ID",
      "PRINCIPAL_ID"
    ]
  },
  {
    "name": "account_workspace-assignment_get",
    "description": "List workspace permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "WORKSPACE_ID": {
          "type": "string",
          "description": "WORKSPACE_ID"
        }
      }
    },
    "required": [
      "WORKSPACE_ID"
    ]
  },
  {
    "name": "account_workspace-assignment_list",
    "description": "Get permission assignments.",
    "parameters": {
      "type": "object",
      "properties": {
        "WORKSPACE_ID": {
          "type": "string",
          "description": "WORKSPACE_ID"
        }
      }
    },
    "required": [
      "WORKSPACE_ID"
    ]
  },
  {
    "name": "account_workspace-assignment_update",
    "description": "Create or update permissions assignment.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "account_workspaces_create",
    "description": "Create a new workspace.",
    "parameters": {
      "type": "object",
      "properties": {
        "WORKSPACE_NAME": {
          "type": "string",
          "description": "WORKSPACE_NAME"
        },
        "aws-region": {
          "type": "string",
          "description": "The AWS region of the workspace's data plane."
        },
        "cloud": {
          "type": "string",
          "description": "The cloud provider which the workspace uses."
        },
        "credentials-id": {
          "type": "string",
          "description": "ID of the workspace's credential configuration object."
        },
        "deployment-name": {
          "type": "string",
          "description": "The deployment name defines part of the subdomain for the workspace."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "location": {
          "type": "string",
          "description": "The Google Cloud region of the workspace data plane in your Google account."
        },
        "managed-services-customer-managed-key-id": {
          "type": "string",
          "description": "The ID of the workspace's managed services encryption key configuration object."
        },
        "network-id": {
          "type": "string"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach RUNNING state"
        },
        "pricing-tier": {
          "type": "string",
          "description": "The pricing tier of the workspace."
        },
        "private-access-settings-id": {
          "type": "string",
          "description": "ID of the workspace's private access settings object."
        },
        "storage-configuration-id": {
          "type": "string",
          "description": "The ID of the workspace's storage configuration object."
        },
        "storage-customer-managed-key-id": {
          "type": "string",
          "description": "The ID of the workspace's storage encryption key configuration object."
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach RUNNING state"
        }
      }
    },
    "required": [
      "WORKSPACE_NAME"
    ]
  },
  {
    "name": "account_workspaces_delete",
    "description": "Delete a workspace.",
    "parameters": {
      "type": "object",
      "properties": {
        "WORKSPACE_ID": {
          "type": "string",
          "description": "WORKSPACE_ID"
        }
      }
    },
    "required": [
      "WORKSPACE_ID"
    ]
  },
  {
    "name": "account_workspaces_get",
    "description": "Get a workspace.",
    "parameters": {
      "type": "object",
      "properties": {
        "WORKSPACE_ID": {
          "type": "string",
          "description": "WORKSPACE_ID"
        }
      }
    },
    "required": [
      "WORKSPACE_ID"
    ]
  },
  {
    "name": "account_workspaces_list",
    "description": "Get all workspaces.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "account_workspaces_update",
    "description": "Update workspace configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "WORKSPACE_ID": {
          "type": "string",
          "description": "WORKSPACE_ID"
        },
        "aws-region": {
          "type": "string",
          "description": "The AWS region of the workspace's data plane (for example, us-west-2)."
        },
        "credentials-id": {
          "type": "string",
          "description": "ID of the workspace's credential configuration object."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "managed-services-customer-managed-key-id": {
          "type": "string",
          "description": "The ID of the workspace's managed services encryption key configuration object."
        },
        "network-connectivity-config-id": {
          "type": "string",
          "description": "The ID of the network connectivity configuration object, which is the parent resource of this private endpoint rule object."
        },
        "network-id": {
          "type": "string",
          "description": "The ID of the workspace's network configuration object."
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach RUNNING state"
        },
        "storage-configuration-id": {
          "type": "string",
          "description": "The ID of the workspace's storage configuration object."
        },
        "storage-customer-managed-key-id": {
          "type": "string",
          "description": "The ID of the key configuration object for workspace storage."
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach RUNNING state"
        }
      }
    },
    "required": [
      "WORKSPACE_ID"
    ]
  },
  {
    "name": "alerts_create",
    "description": "Create an alert.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "parent": {
          "type": "string",
          "description": "The identifier of the workspace folder containing the object."
        },
        "rearm": {
          "type": "integer",
          "description": "Number of seconds after being triggered before the alert rearms itself and can be triggered again."
        }
      }
    }
  },
  {
    "name": "alerts_delete",
    "description": "Delete an alert.",
    "parameters": {
      "type": "object",
      "properties": {
        "ALERT_ID": {
          "type": "string",
          "description": "ALERT_ID"
        }
      }
    },
    "required": [
      "ALERT_ID"
    ]
  },
  {
    "name": "alerts_get",
    "description": "Get an alert.",
    "parameters": {
      "type": "object",
      "properties": {
        "ALERT_ID": {
          "type": "string",
          "description": "ALERT_ID"
        }
      }
    },
    "required": [
      "ALERT_ID"
    ]
  },
  {
    "name": "alerts_list",
    "description": "Get alerts.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "alerts_update",
    "description": "Update an alert.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "rearm": {
          "type": "integer",
          "description": "Number of seconds after being triggered before the alert rearms itself and can be triggered again."
        }
      }
    }
  },
  {
    "name": "api_delete",
    "description": "Perform DELETE request",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "api_get",
    "description": "Perform GET request",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "api_head",
    "description": "Perform HEAD request",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "api_patch",
    "description": "Perform PATCH request",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "api_post",
    "description": "Perform POST request",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "api_put",
    "description": "Perform PUT request",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "artifact-allowlists_get",
    "description": "Get an artifact allowlist.",
    "parameters": {
      "type": "object",
      "properties": {
        "ARTIFACT_TYPE": {
          "type": "string",
          "description": "ARTIFACT_TYPE"
        }
      }
    },
    "required": [
      "ARTIFACT_TYPE"
    ]
  },
  {
    "name": "artifact-allowlists_update",
    "description": "Set an artifact allowlist.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "auth_env",
    "description": "Get env",
    "parameters": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string",
          "description": "Hostname to get auth env for"
        },
        "profile": {
          "type": "string",
          "description": "Profile to get auth env for"
        }
      }
    }
  },
  {
    "name": "auth_login",
    "description": "Authenticate this machine",
    "parameters": {
      "type": "object",
      "properties": {
        "HOST": {
          "type": "string",
          "description": "HOST"
        },
        "configure-cluster": {
          "type": "boolean",
          "description": "Prompts to configure cluster"
        },
        "timeout": {
          "type": "number",
          "description": "Timeout for completing login challenge in the browser"
        }
      }
    },
    "required": [
      "HOST"
    ]
  },
  {
    "name": "auth_profiles",
    "description": "Lists profiles from ~/.databrickscfg",
    "parameters": {
      "type": "object",
      "properties": {
        "skip-validate": {
          "type": "boolean",
          "description": "Whether to skip validating the profiles"
        }
      }
    }
  },
  {
    "name": "auth_token",
    "description": "Get authentication token",
    "parameters": {
      "type": "object",
      "properties": {
        "HOST": {
          "type": "string",
          "description": "HOST"
        },
        "timeout": {
          "type": "number",
          "description": "Timeout for acquiring a token."
        }
      }
    },
    "required": [
      "HOST"
    ]
  },
  {
    "name": "bundle_deploy",
    "description": "Deploy bundle",
    "parameters": {
      "type": "object",
      "properties": {
        "compute-id": {
          "type": "string",
          "description": "Override compute in the deployment with the given compute ID."
        },
        "force": {
          "type": "boolean",
          "description": "Force-override Git branch validation."
        },
        "force-lock": {
          "type": "boolean",
          "description": "Force acquisition of deployment lock."
        }
      }
    }
  },
  {
    "name": "bundle_destroy",
    "description": "Destroy deployed bundle resources",
    "parameters": {
      "type": "object",
      "properties": {
        "auto-approve": {
          "type": "boolean",
          "description": "Skip interactive approvals for deleting resources and files"
        },
        "force-lock": {
          "type": "boolean",
          "description": "Force acquisition of deployment lock."
        }
      }
    }
  },
  {
    "name": "bundle_init",
    "description": "Initialize using a bundle template",
    "parameters": {
      "type": "object",
      "properties": {
        "TEMPLATE_PATH": {
          "type": "string",
          "description": "TEMPLATE_PATH"
        },
        "branch": {
          "type": "string",
          "description": "Git branch to use for template initialization"
        },
        "config-file": {
          "type": "string",
          "description": "File containing input parameters for template initialization."
        },
        "output-dir": {
          "type": "string",
          "description": "Directory to write the initialized template to."
        },
        "tag": {
          "type": "string",
          "description": "Git tag to use for template initialization"
        },
        "template-dir": {
          "type": "string",
          "description": "Directory path within a Git repository containing the template."
        }
      }
    },
    "required": [
      "TEMPLATE_PATH"
    ]
  },
  {
    "name": "bundle_launch",
    "description": "Launches a notebook on development cluster",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "bundle_run",
    "description": "Run a resource (e.g. a job or a pipeline)",
    "parameters": {
      "type": "object",
      "properties": {
        "KEY": {
          "type": "string",
          "description": "KEY"
        },
        "dbt-commands": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of commands to execute for jobs with DBT tasks."
        },
        "full-refresh": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of tables to reset and recompute."
        },
        "full-refresh-all": {
          "type": "boolean",
          "description": "Perform a full graph reset and recompute."
        },
        "jar-params": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of parameters for jobs with Spark JAR tasks."
        },
        "no-wait": {
          "type": "boolean",
          "description": "Don't wait for the run to complete."
        },
        "notebook-params": {
          "type": "string",
          "description": "A map from keys to values for jobs with notebook tasks."
        },
        "pipeline-params": {
          "type": "string",
          "description": "A map from keys to values for jobs with pipeline tasks."
        },
        "python-named-params": {
          "type": "string",
          "description": "A map from keys to values for jobs with Python wheel tasks."
        },
        "python-params": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of parameters for jobs with Python tasks."
        },
        "refresh": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of tables to update."
        },
        "refresh-all": {
          "type": "boolean",
          "description": "Perform a full graph update."
        },
        "spark-submit-params": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of parameters for jobs with Spark submit tasks."
        },
        "sql-params": {
          "type": "string",
          "description": "A map from keys to values for jobs with SQL tasks."
        }
      }
    },
    "required": [
      "KEY"
    ]
  },
  {
    "name": "bundle_schema",
    "description": "Generate JSON Schema for bundle configuration",
    "parameters": {
      "type": "object",
      "properties": {
        "only-docs": {
          "type": "boolean",
          "description": "only generate descriptions for the schema"
        },
        "openapi": {
          "type": "string",
          "description": "path to a databricks openapi spec"
        }
      }
    }
  },
  {
    "name": "bundle_sync",
    "description": "Synchronize bundle tree to the workspace",
    "parameters": {
      "type": "object",
      "properties": {
        "full": {
          "type": "boolean",
          "description": "perform full synchronization (default is incremental)"
        },
        "interval": {
          "type": "number",
          "description": "file system polling interval (for --watch)"
        },
        "watch": {
          "type": "boolean",
          "description": "watch local file system for changes"
        }
      }
    }
  },
  {
    "name": "bundle_test",
    "description": "run tests for the project",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "bundle_validate",
    "description": "Validate configuration",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "catalogs_create",
    "description": "Create a catalog.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "comment": {
          "type": "string",
          "description": "User-provided free-form text description."
        },
        "connection-name": {
          "type": "string",
          "description": "The name of the connection to an external data source."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "provider-name": {
          "type": "string",
          "description": "The name of delta sharing provider."
        },
        "share-name": {
          "type": "string",
          "description": "The name of the share under the share provider."
        },
        "storage-root": {
          "type": "string",
          "description": "Storage root URL for managed tables within catalog."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "catalogs_delete",
    "description": "Delete a catalog.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "force": {
          "type": "boolean",
          "description": "Force deletion even if the catalog is not empty."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "catalogs_get",
    "description": "Get a catalog.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "catalogs_list",
    "description": "List catalogs.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "catalogs_update",
    "description": "Update a catalog.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "comment": {
          "type": "string",
          "description": "User-provided free-form text description."
        },
        "isolation-mode": {
          "type": "string",
          "description": "Whether the current securable is accessible from all workspaces or a specific set of workspaces."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "name": {
          "type": "string",
          "description": "Name of catalog."
        },
        "owner": {
          "type": "string",
          "description": "Username of current owner of catalog."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "cluster-policies_create",
    "description": "Create a new policy.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "definition": {
          "type": "string",
          "description": "Policy definition document expressed in Databricks Cluster Policy Definition Language."
        },
        "description": {
          "type": "string",
          "description": "Additional human-readable description of the cluster policy."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "max-clusters-per-user": {
          "type": "integer",
          "description": "Max number of clusters per user that can be active using this policy."
        },
        "policy-family-definition-overrides": {
          "type": "string",
          "description": "Policy definition JSON document expressed in Databricks Policy Definition Language."
        },
        "policy-family-id": {
          "type": "string",
          "description": "ID of the policy family."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "cluster-policies_delete",
    "description": "Delete a cluster policy.",
    "parameters": {
      "type": "object",
      "properties": {
        "POLICY_ID": {
          "type": "string",
          "description": "POLICY_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "POLICY_ID"
    ]
  },
  {
    "name": "cluster-policies_edit",
    "description": "Update a cluster policy.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "POLICY_ID": {
          "type": "string",
          "description": "POLICY_ID"
        },
        "definition": {
          "type": "string",
          "description": "Policy definition document expressed in Databricks Cluster Policy Definition Language."
        },
        "description": {
          "type": "string",
          "description": "Additional human-readable description of the cluster policy."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "max-clusters-per-user": {
          "type": "integer",
          "description": "Max number of clusters per user that can be active using this policy."
        },
        "policy-family-definition-overrides": {
          "type": "string",
          "description": "Policy definition JSON document expressed in Databricks Policy Definition Language."
        },
        "policy-family-id": {
          "type": "string",
          "description": "ID of the policy family."
        }
      }
    },
    "required": [
      "POLICY_ID",
      "NAME"
    ]
  },
  {
    "name": "cluster-policies_get",
    "description": "Get a cluster policy.",
    "parameters": {
      "type": "object",
      "properties": {
        "POLICY_ID": {
          "type": "string",
          "description": "POLICY_ID"
        }
      }
    },
    "required": [
      "POLICY_ID"
    ]
  },
  {
    "name": "cluster-policies_get-permission-levels",
    "description": "Get cluster policy permission levels.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_POLICY_ID": {
          "type": "string",
          "description": "CLUSTER_POLICY_ID"
        }
      }
    },
    "required": [
      "CLUSTER_POLICY_ID"
    ]
  },
  {
    "name": "cluster-policies_get-permissions",
    "description": "Get cluster policy permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_POLICY_ID": {
          "type": "string",
          "description": "CLUSTER_POLICY_ID"
        }
      }
    },
    "required": [
      "CLUSTER_POLICY_ID"
    ]
  },
  {
    "name": "cluster-policies_list",
    "description": "List cluster policies.",
    "parameters": {
      "type": "object",
      "properties": {
        "sort-column": {
          "type": "string",
          "description": "The cluster policy attribute to sort by."
        },
        "sort-order": {
          "type": "string",
          "description": "The order in which the policies get listed."
        }
      }
    }
  },
  {
    "name": "cluster-policies_set-permissions",
    "description": "Set cluster policy permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_POLICY_ID": {
          "type": "string",
          "description": "CLUSTER_POLICY_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "CLUSTER_POLICY_ID"
    ]
  },
  {
    "name": "cluster-policies_update-permissions",
    "description": "Update cluster policy permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_POLICY_ID": {
          "type": "string",
          "description": "CLUSTER_POLICY_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "CLUSTER_POLICY_ID"
    ]
  },
  {
    "name": "clusters_change-owner",
    "description": "Change cluster owner.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        },
        "OWNER_USERNAME": {
          "type": "string",
          "description": "OWNER_USERNAME"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "CLUSTER_ID",
      "OWNER_USERNAME"
    ]
  },
  {
    "name": "clusters_create",
    "description": "Create new cluster.",
    "parameters": {
      "type": "object",
      "properties": {
        "SPARK_VERSION": {
          "type": "string",
          "description": "SPARK_VERSION"
        },
        "apply-policy-default-values": {
          "type": "boolean"
        },
        "autotermination-minutes": {
          "type": "integer",
          "description": "Automatically terminates the cluster after it is inactive for this time in minutes."
        },
        "cluster-name": {
          "type": "string",
          "description": "Cluster name requested by the user."
        },
        "cluster-source": {
          "type": "string",
          "description": "Determines whether the cluster was created by a user through the UI, created by the Databricks Jobs Scheduler, or through an API request."
        },
        "data-security-mode": {
          "type": "string",
          "description": "Data security mode decides what data governance model to use when accessing data from a cluster."
        },
        "driver-instance-pool-id": {
          "type": "string",
          "description": "The optional ID of the instance pool for the driver of the cluster belongs."
        },
        "driver-node-type-id": {
          "type": "string",
          "description": "The node type of the Spark driver."
        },
        "enable-elastic-disk": {
          "type": "boolean",
          "description": "Autoscaling Local Storage: when enabled, this cluster will dynamically acquire additional disk space when its Spark workers are running low on disk space."
        },
        "enable-local-disk-encryption": {
          "type": "boolean",
          "description": "Whether to enable LUKS on cluster VMs' local disks."
        },
        "instance-pool-id": {
          "type": "string",
          "description": "The optional ID of the instance pool to which the cluster belongs."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach RUNNING state"
        },
        "node-type-id": {
          "type": "string",
          "description": "This field encodes, through a single value, the resources available to each of the Spark nodes in this cluster."
        },
        "num-workers": {
          "type": "integer",
          "description": "Number of worker nodes that this cluster should have."
        },
        "policy-id": {
          "type": "string",
          "description": "The ID of the cluster policy used to create the cluster if applicable."
        },
        "runtime-engine": {
          "type": "string",
          "description": "Decides which runtime engine to be use, e.g."
        },
        "single-user-name": {
          "type": "string",
          "description": "Single user name if data_security_mode is SINGLE_USER."
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach RUNNING state"
        }
      }
    },
    "required": [
      "SPARK_VERSION"
    ]
  },
  {
    "name": "clusters_delete",
    "description": "Terminate cluster.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach TERMINATED state"
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach TERMINATED state"
        }
      }
    },
    "required": [
      "CLUSTER_ID"
    ]
  },
  {
    "name": "clusters_edit",
    "description": "Update cluster configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        },
        "SPARK_VERSION": {
          "type": "string",
          "description": "SPARK_VERSION"
        },
        "apply-policy-default-values": {
          "type": "boolean"
        },
        "autotermination-minutes": {
          "type": "integer",
          "description": "Automatically terminates the cluster after it is inactive for this time in minutes."
        },
        "cluster-name": {
          "type": "string",
          "description": "Cluster name requested by the user."
        },
        "cluster-source": {
          "type": "string",
          "description": "Determines whether the cluster was created by a user through the UI, created by the Databricks Jobs Scheduler, or through an API request."
        },
        "data-security-mode": {
          "type": "string",
          "description": "Data security mode decides what data governance model to use when accessing data from a cluster."
        },
        "driver-instance-pool-id": {
          "type": "string",
          "description": "The optional ID of the instance pool for the driver of the cluster belongs."
        },
        "driver-node-type-id": {
          "type": "string",
          "description": "The node type of the Spark driver."
        },
        "enable-elastic-disk": {
          "type": "boolean",
          "description": "Autoscaling Local Storage: when enabled, this cluster will dynamically acquire additional disk space when its Spark workers are running low on disk space."
        },
        "enable-local-disk-encryption": {
          "type": "boolean",
          "description": "Whether to enable LUKS on cluster VMs' local disks."
        },
        "instance-pool-id": {
          "type": "string",
          "description": "The optional ID of the instance pool to which the cluster belongs."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach RUNNING state"
        },
        "node-type-id": {
          "type": "string",
          "description": "This field encodes, through a single value, the resources available to each of the Spark nodes in this cluster."
        },
        "num-workers": {
          "type": "integer",
          "description": "Number of worker nodes that this cluster should have."
        },
        "policy-id": {
          "type": "string",
          "description": "The ID of the cluster policy used to create the cluster if applicable."
        },
        "runtime-engine": {
          "type": "string",
          "description": "Decides which runtime engine to be use, e.g."
        },
        "single-user-name": {
          "type": "string",
          "description": "Single user name if data_security_mode is SINGLE_USER."
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach RUNNING state"
        }
      }
    },
    "required": [
      "CLUSTER_ID",
      "SPARK_VERSION"
    ]
  },
  {
    "name": "clusters_events",
    "description": "List cluster activity events.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        },
        "end-time": {
          "type": "integer",
          "description": "The end time in epoch milliseconds."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "limit": {
          "type": "integer",
          "description": "The maximum number of events to include in a page of events."
        },
        "offset": {
          "type": "integer",
          "description": "The offset in the result set."
        },
        "order": {
          "type": "string",
          "description": "The order to list events in; either \"ASC\" or \"DESC\"."
        },
        "start-time": {
          "type": "integer",
          "description": "The start time in epoch milliseconds."
        }
      }
    },
    "required": [
      "CLUSTER_ID"
    ]
  },
  {
    "name": "clusters_get",
    "description": "Get cluster info.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach RUNNING state"
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach RUNNING state"
        }
      }
    },
    "required": [
      "CLUSTER_ID"
    ]
  },
  {
    "name": "clusters_get-permission-levels",
    "description": "Get cluster permission levels.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        }
      }
    },
    "required": [
      "CLUSTER_ID"
    ]
  },
  {
    "name": "clusters_get-permissions",
    "description": "Get cluster permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        }
      }
    },
    "required": [
      "CLUSTER_ID"
    ]
  },
  {
    "name": "clusters_list",
    "description": "List all clusters.",
    "parameters": {
      "type": "object",
      "properties": {
        "can-use-client": {
          "type": "string",
          "description": "Filter clusters based on what type of client it can be used for."
        }
      }
    }
  },
  {
    "name": "clusters_list-node-types",
    "description": "List node types.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "clusters_list-zones",
    "description": "List availability zones.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "clusters_permanent-delete",
    "description": "Permanently delete cluster.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "CLUSTER_ID"
    ]
  },
  {
    "name": "clusters_pin",
    "description": "Pin cluster.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "CLUSTER_ID"
    ]
  },
  {
    "name": "clusters_resize",
    "description": "Resize cluster.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach RUNNING state"
        },
        "num-workers": {
          "type": "integer",
          "description": "Number of worker nodes that this cluster should have."
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach RUNNING state"
        }
      }
    },
    "required": [
      "CLUSTER_ID"
    ]
  },
  {
    "name": "clusters_restart",
    "description": "Restart cluster.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach RUNNING state"
        },
        "restart-user": {
          "type": "string",
          "description": "\u003cneeds content added\u003e."
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach RUNNING state"
        }
      }
    },
    "required": [
      "CLUSTER_ID"
    ]
  },
  {
    "name": "clusters_set-permissions",
    "description": "Set cluster permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "CLUSTER_ID"
    ]
  },
  {
    "name": "clusters_spark-versions",
    "description": "List available Spark versions.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "clusters_start",
    "description": "Start terminated cluster.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach RUNNING state"
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach RUNNING state"
        }
      }
    },
    "required": [
      "CLUSTER_ID"
    ]
  },
  {
    "name": "clusters_unpin",
    "description": "Unpin cluster.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "CLUSTER_ID"
    ]
  },
  {
    "name": "clusters_update-permissions",
    "description": "Update cluster permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "CLUSTER_ID"
    ]
  },
  {
    "name": "completion_bash",
    "description": "Generate the autocompletion script for bash",
    "parameters": {
      "type": "object",
      "properties": {
        "no-descriptions": {
          "type": "boolean",
          "description": "disable completion descriptions"
        }
      }
    }
  },
  {
    "name": "completion_fish",
    "description": "Generate the autocompletion script for fish",
    "parameters": {
      "type": "object",
      "properties": {
        "no-descriptions": {
          "type": "boolean",
          "description": "disable completion descriptions"
        }
      }
    }
  },
  {
    "name": "completion_powershell",
    "description": "Generate the autocompletion script for powershell",
    "parameters": {
      "type": "object",
      "properties": {
        "no-descriptions": {
          "type": "boolean",
          "description": "disable completion descriptions"
        }
      }
    }
  },
  {
    "name": "completion_zsh",
    "description": "Generate the autocompletion script for zsh",
    "parameters": {
      "type": "object",
      "properties": {
        "no-descriptions": {
          "type": "boolean",
          "description": "disable completion descriptions"
        }
      }
    }
  },
  {
    "name": "configure",
    "description": "Configure authentication",
    "parameters": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string",
          "description": "Databricks workspace host."
        },
        "profile": {
          "type": "string",
          "description": "Name for the connection profile to configure."
        }
      }
    }
  },
  {
    "name": "connections_create",
    "description": "Create a connection.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "description": "User-provided free-form text description."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "read-only": {
          "type": "boolean",
          "description": "If the connection is read only."
        }
      }
    }
  },
  {
    "name": "connections_delete",
    "description": "Delete a connection.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME_ARG": {
          "type": "string",
          "description": "NAME_ARG"
        }
      }
    },
    "required": [
      "NAME_ARG"
    ]
  },
  {
    "name": "connections_get",
    "description": "Get a connection.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME_ARG": {
          "type": "string",
          "description": "NAME_ARG"
        }
      }
    },
    "required": [
      "NAME_ARG"
    ]
  },
  {
    "name": "connections_list",
    "description": "List connections.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "connections_update",
    "description": "Update a connection.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "owner": {
          "type": "string",
          "description": "Username of current owner of the connection."
        }
      }
    }
  },
  {
    "name": "current-user_me",
    "description": "Get current user info.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "dashboards_create",
    "description": "Create a dashboard object.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "dashboards_delete",
    "description": "Remove a dashboard.",
    "parameters": {
      "type": "object",
      "properties": {
        "DASHBOARD_ID": {
          "type": "string",
          "description": "DASHBOARD_ID"
        }
      }
    },
    "required": [
      "DASHBOARD_ID"
    ]
  },
  {
    "name": "dashboards_get",
    "description": "Retrieve a definition.",
    "parameters": {
      "type": "object",
      "properties": {
        "DASHBOARD_ID": {
          "type": "string",
          "description": "DASHBOARD_ID"
        }
      }
    },
    "required": [
      "DASHBOARD_ID"
    ]
  },
  {
    "name": "dashboards_list",
    "description": "Get dashboard objects.",
    "parameters": {
      "type": "object",
      "properties": {
        "order": {
          "type": "string",
          "description": "Name of dashboard attribute to order by."
        },
        "page": {
          "type": "integer",
          "description": "Page number to retrieve."
        },
        "page-size": {
          "type": "integer",
          "description": "Number of dashboards to return per page."
        },
        "q": {
          "type": "string",
          "description": "Full text search term."
        }
      }
    }
  },
  {
    "name": "dashboards_restore",
    "description": "Restore a dashboard.",
    "parameters": {
      "type": "object",
      "properties": {
        "DASHBOARD_ID": {
          "type": "string",
          "description": "DASHBOARD_ID"
        }
      }
    },
    "required": [
      "DASHBOARD_ID"
    ]
  },
  {
    "name": "data-sources_list",
    "description": "Get a list of SQL warehouses.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "experiments_create-experiment",
    "description": "Create experiment.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "artifact-location": {
          "type": "string",
          "description": "Location where all artifacts for the experiment are stored."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "experiments_create-run",
    "description": "Create a run.",
    "parameters": {
      "type": "object",
      "properties": {
        "experiment-id": {
          "type": "string",
          "description": "ID of the associated experiment."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "start-time": {
          "type": "integer",
          "description": "Unix timestamp in milliseconds of when the run started."
        },
        "user-id": {
          "type": "string",
          "description": "ID of the user executing the run."
        }
      }
    }
  },
  {
    "name": "experiments_delete-experiment",
    "description": "Delete an experiment.",
    "parameters": {
      "type": "object",
      "properties": {
        "EXPERIMENT_ID": {
          "type": "string",
          "description": "EXPERIMENT_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "EXPERIMENT_ID"
    ]
  },
  {
    "name": "experiments_delete-run",
    "description": "Delete a run.",
    "parameters": {
      "type": "object",
      "properties": {
        "RUN_ID": {
          "type": "string",
          "description": "RUN_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "RUN_ID"
    ]
  },
  {
    "name": "experiments_delete-runs",
    "description": "Delete runs by creation time.",
    "parameters": {
      "type": "object",
      "properties": {
        "EXPERIMENT_ID": {
          "type": "string",
          "description": "EXPERIMENT_ID"
        },
        "MAX_TIMESTAMP_MILLIS": {
          "type": "string",
          "description": "MAX_TIMESTAMP_MILLIS"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "max-runs": {
          "type": "integer",
          "description": "An optional positive integer indicating the maximum number of runs to delete."
        }
      }
    },
    "required": [
      "EXPERIMENT_ID",
      "MAX_TIMESTAMP_MILLIS"
    ]
  },
  {
    "name": "experiments_delete-tag",
    "description": "Delete a tag.",
    "parameters": {
      "type": "object",
      "properties": {
        "KEY": {
          "type": "string",
          "description": "KEY"
        },
        "RUN_ID": {
          "type": "string",
          "description": "RUN_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "RUN_ID",
      "KEY"
    ]
  },
  {
    "name": "experiments_get-by-name",
    "description": "Get metadata.",
    "parameters": {
      "type": "object",
      "properties": {
        "EXPERIMENT_NAME": {
          "type": "string",
          "description": "EXPERIMENT_NAME"
        }
      }
    },
    "required": [
      "EXPERIMENT_NAME"
    ]
  },
  {
    "name": "experiments_get-experiment",
    "description": "Get an experiment.",
    "parameters": {
      "type": "object",
      "properties": {
        "EXPERIMENT_ID": {
          "type": "string",
          "description": "EXPERIMENT_ID"
        }
      }
    },
    "required": [
      "EXPERIMENT_ID"
    ]
  },
  {
    "name": "experiments_get-history",
    "description": "Get history of a given metric within a run.",
    "parameters": {
      "type": "object",
      "properties": {
        "METRIC_KEY": {
          "type": "string",
          "description": "METRIC_KEY"
        },
        "max-results": {
          "type": "integer",
          "description": "Maximum number of Metric records to return per paginated request."
        },
        "page-token": {
          "type": "string",
          "description": "Token indicating the page of metric histories to fetch."
        },
        "run-id": {
          "type": "string",
          "description": "ID of the run from which to fetch metric values."
        },
        "run-uuid": {
          "type": "string",
          "description": "[Deprecated, use run_id instead] ID of the run from which to fetch metric values."
        }
      }
    },
    "required": [
      "METRIC_KEY"
    ]
  },
  {
    "name": "experiments_get-permission-levels",
    "description": "Get experiment permission levels.",
    "parameters": {
      "type": "object",
      "properties": {
        "EXPERIMENT_ID": {
          "type": "string",
          "description": "EXPERIMENT_ID"
        }
      }
    },
    "required": [
      "EXPERIMENT_ID"
    ]
  },
  {
    "name": "experiments_get-permissions",
    "description": "Get experiment permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "EXPERIMENT_ID": {
          "type": "string",
          "description": "EXPERIMENT_ID"
        }
      }
    },
    "required": [
      "EXPERIMENT_ID"
    ]
  },
  {
    "name": "experiments_get-run",
    "description": "Get a run.",
    "parameters": {
      "type": "object",
      "properties": {
        "RUN_ID": {
          "type": "string",
          "description": "RUN_ID"
        },
        "run-uuid": {
          "type": "string",
          "description": "[Deprecated, use run_id instead] ID of the run to fetch."
        }
      }
    },
    "required": [
      "RUN_ID"
    ]
  },
  {
    "name": "experiments_list-artifacts",
    "description": "Get all artifacts.",
    "parameters": {
      "type": "object",
      "properties": {
        "page-token": {
          "type": "string",
          "description": "Token indicating the page of artifact results to fetch."
        },
        "path": {
          "type": "string",
          "description": "Filter artifacts matching this path (a relative path from the root artifact directory)."
        },
        "run-id": {
          "type": "string",
          "description": "ID of the run whose artifacts to list."
        },
        "run-uuid": {
          "type": "string",
          "description": "[Deprecated, use run_id instead] ID of the run whose artifacts to list."
        }
      }
    }
  },
  {
    "name": "experiments_list-experiments",
    "description": "List experiments.",
    "parameters": {
      "type": "object",
      "properties": {
        "max-results": {
          "type": "integer",
          "description": "Maximum number of experiments desired."
        },
        "page-token": {
          "type": "string",
          "description": "Token indicating the page of experiments to fetch."
        },
        "view-type": {
          "type": "string",
          "description": "Qualifier for type of experiments to be returned."
        }
      }
    }
  },
  {
    "name": "experiments_log-batch",
    "description": "Log a batch.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "run-id": {
          "type": "string",
          "description": "ID of the run to log under."
        }
      }
    }
  },
  {
    "name": "experiments_log-inputs",
    "description": "Log inputs to a run.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "run-id": {
          "type": "string",
          "description": "ID of the run to log under."
        }
      }
    }
  },
  {
    "name": "experiments_log-metric",
    "description": "Log a metric.",
    "parameters": {
      "type": "object",
      "properties": {
        "KEY": {
          "type": "string",
          "description": "KEY"
        },
        "TIMESTAMP": {
          "type": "string",
          "description": "TIMESTAMP"
        },
        "VALUE": {
          "type": "string",
          "description": "VALUE"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "run-id": {
          "type": "string",
          "description": "ID of the run under which to log the metric."
        },
        "run-uuid": {
          "type": "string",
          "description": "[Deprecated, use run_id instead] ID of the run under which to log the metric."
        },
        "step": {
          "type": "integer",
          "description": "Step at which to log the metric."
        }
      }
    },
    "required": [
      "KEY",
      "VALUE",
      "TIMESTAMP"
    ]
  },
  {
    "name": "experiments_log-model",
    "description": "Log a model.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "model-json": {
          "type": "string",
          "description": "MLmodel file in json format."
        },
        "run-id": {
          "type": "string",
          "description": "ID of the run to log under."
        }
      }
    }
  },
  {
    "name": "experiments_log-param",
    "description": "Log a param.",
    "parameters": {
      "type": "object",
      "properties": {
        "KEY": {
          "type": "string",
          "description": "KEY"
        },
        "VALUE": {
          "type": "string",
          "description": "VALUE"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "run-id": {
          "type": "string",
          "description": "ID of the run under which to log the param."
        },
        "run-uuid": {
          "type": "string",
          "description": "[Deprecated, use run_id instead] ID of the run under which to log the param."
        }
      }
    },
    "required": [
      "KEY",
      "VALUE"
    ]
  },
  {
    "name": "experiments_restore-experiment",
    "description": "Restores an experiment.",
    "parameters": {
      "type": "object",
      "properties": {
        "EXPERIMENT_ID": {
          "type": "string",
          "description": "EXPERIMENT_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "EXPERIMENT_ID"
    ]
  },
  {
    "name": "experiments_restore-run",
    "description": "Restore a run.",
    "parameters": {
      "type": "object",
      "properties": {
        "RUN_ID": {
          "type": "string",
          "description": "RUN_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "RUN_ID"
    ]
  },
  {
    "name": "experiments_restore-runs",
    "description": "Restore runs by deletion time.",
    "parameters": {
      "type": "object",
      "properties": {
        "EXPERIMENT_ID": {
          "type": "string",
          "description": "EXPERIMENT_ID"
        },
        "MIN_TIMESTAMP_MILLIS": {
          "type": "string",
          "description": "MIN_TIMESTAMP_MILLIS"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "max-runs": {
          "type": "integer",
          "description": "An optional positive integer indicating the maximum number of runs to restore."
        }
      }
    },
    "required": [
      "EXPERIMENT_ID",
      "MIN_TIMESTAMP_MILLIS"
    ]
  },
  {
    "name": "experiments_search-experiments",
    "description": "Search experiments.",
    "parameters": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "String representing a SQL filter condition (e.g."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "max-results": {
          "type": "integer",
          "description": "Maximum number of experiments desired."
        },
        "page-token": {
          "type": "string",
          "description": "Token indicating the page of experiments to fetch."
        },
        "view-type": {
          "type": "string",
          "description": "Qualifier for type of experiments to be returned."
        }
      }
    }
  },
  {
    "name": "experiments_search-runs",
    "description": "Search for runs.",
    "parameters": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "A filter expression over params, metrics, and tags, that allows returning a subset of runs."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "max-results": {
          "type": "integer",
          "description": "Maximum number of runs desired."
        },
        "page-token": {
          "type": "string",
          "description": "Token for the current page of runs."
        },
        "run-view-type": {
          "type": "string",
          "description": "Whether to display only active, only deleted, or all runs."
        }
      }
    }
  },
  {
    "name": "experiments_set-experiment-tag",
    "description": "Set a tag.",
    "parameters": {
      "type": "object",
      "properties": {
        "EXPERIMENT_ID": {
          "type": "string",
          "description": "EXPERIMENT_ID"
        },
        "KEY": {
          "type": "string",
          "description": "KEY"
        },
        "VALUE": {
          "type": "string",
          "description": "VALUE"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "EXPERIMENT_ID",
      "KEY",
      "VALUE"
    ]
  },
  {
    "name": "experiments_set-permissions",
    "description": "Set experiment permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "EXPERIMENT_ID": {
          "type": "string",
          "description": "EXPERIMENT_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "EXPERIMENT_ID"
    ]
  },
  {
    "name": "experiments_set-tag",
    "description": "Set a tag.",
    "parameters": {
      "type": "object",
      "properties": {
        "KEY": {
          "type": "string",
          "description": "KEY"
        },
        "VALUE": {
          "type": "string",
          "description": "VALUE"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "run-id": {
          "type": "string",
          "description": "ID of the run under which to log the tag."
        },
        "run-uuid": {
          "type": "string",
          "description": "[Deprecated, use run_id instead] ID of the run under which to log the tag."
        }
      }
    },
    "required": [
      "KEY",
      "VALUE"
    ]
  },
  {
    "name": "experiments_update-experiment",
    "description": "Update an experiment.",
    "parameters": {
      "type": "object",
      "properties": {
        "EXPERIMENT_ID": {
          "type": "string",
          "description": "EXPERIMENT_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "new-name": {
          "type": "string",
          "description": "If provided, the experiment's name is changed to the new name."
        }
      }
    },
    "required": [
      "EXPERIMENT_ID"
    ]
  },
  {
    "name": "experiments_update-permissions",
    "description": "Update experiment permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "EXPERIMENT_ID": {
          "type": "string",
          "description": "EXPERIMENT_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "EXPERIMENT_ID"
    ]
  },
  {
    "name": "experiments_update-run",
    "description": "Update a run.",
    "parameters": {
      "type": "object",
      "properties": {
        "end-time": {
          "type": "integer",
          "description": "Unix timestamp in milliseconds of when the run ended."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "run-id": {
          "type": "string",
          "description": "ID of the run to update."
        },
        "run-uuid": {
          "type": "string",
          "description": "[Deprecated, use run_id instead] ID of the run to update."
        },
        "status": {
          "type": "string",
          "description": "Updated status of the run."
        }
      }
    }
  },
  {
    "name": "external-locations_create",
    "description": "Create an external location.",
    "parameters": {
      "type": "object",
      "properties": {
        "CREDENTIAL_NAME": {
          "type": "string",
          "description": "CREDENTIAL_NAME"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "URL": {
          "type": "string",
          "description": "URL"
        },
        "access-point": {
          "type": "string",
          "description": "The AWS access point to use when accesing s3 for this external location."
        },
        "comment": {
          "type": "string",
          "description": "User-provided free-form text description."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "read-only": {
          "type": "boolean",
          "description": "Indicates whether the external location is read-only."
        },
        "skip-validation": {
          "type": "boolean",
          "description": "Skips validation of the storage credential associated with the external location."
        }
      }
    },
    "required": [
      "NAME",
      "URL",
      "CREDENTIAL_NAME"
    ]
  },
  {
    "name": "external-locations_delete",
    "description": "Delete an external location.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "force": {
          "type": "boolean",
          "description": "Force deletion even if there are dependent external tables or mounts."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "external-locations_get",
    "description": "Get an external location.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "external-locations_list",
    "description": "List external locations.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "external-locations_update",
    "description": "Update an external location.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "access-point": {
          "type": "string",
          "description": "The AWS access point to use when accesing s3 for this external location."
        },
        "comment": {
          "type": "string",
          "description": "User-provided free-form text description."
        },
        "credential-name": {
          "type": "string",
          "description": "Name of the storage credential used with this location."
        },
        "force": {
          "type": "boolean",
          "description": "Force update even if changing url invalidates dependent external tables or mounts."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "name": {
          "type": "string",
          "description": "Name of the external location."
        },
        "owner": {
          "type": "string",
          "description": "The owner of the external location."
        },
        "read-only": {
          "type": "boolean",
          "description": "Indicates whether the external location is read-only."
        },
        "skip-validation": {
          "type": "boolean",
          "description": "Skips validation of the storage credential associated with the external location."
        },
        "url": {
          "type": "string",
          "description": "Path URL of the external location."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "fs_cat",
    "description": "Show file content",
    "parameters": {
      "type": "object",
      "properties": {
        "FILE_PATH": {
          "type": "string",
          "description": "FILE_PATH"
        }
      }
    },
    "required": [
      "FILE_PATH"
    ]
  },
  {
    "name": "fs_cp",
    "description": "Copy files and directories to and from DBFS.",
    "parameters": {
      "type": "object",
      "properties": {
        "SOURCE_PATH": {
          "type": "string",
          "description": "SOURCE_PATH"
        },
        "TARGET_PATH": {
          "type": "string",
          "description": "TARGET_PATH"
        },
        "overwrite": {
          "type": "boolean",
          "description": "overwrite existing files"
        },
        "recursive": {
          "type": "boolean",
          "description": "recursively copy files from directory"
        }
      }
    },
    "required": [
      "SOURCE_PATH",
      "TARGET_PATH"
    ]
  },
  {
    "name": "fs_ls",
    "description": "Lists files",
    "parameters": {
      "type": "object",
      "properties": {
        "DIR_PATH": {
          "type": "string",
          "description": "DIR_PATH"
        },
        "absolute": {
          "type": "boolean",
          "description": "Displays absolute paths."
        },
        "long": {
          "type": "boolean",
          "description": "Displays full information including size, file type and modification time since Epoch in milliseconds."
        }
      }
    },
    "required": [
      "DIR_PATH"
    ]
  },
  {
    "name": "fs_mkdir",
    "description": "Make directories",
    "parameters": {
      "type": "object",
      "properties": {
        "DIR_PATH": {
          "type": "string",
          "description": "DIR_PATH"
        }
      }
    },
    "required": [
      "DIR_PATH"
    ]
  },
  {
    "name": "fs_rm",
    "description": "Remove files and directories from dbfs.",
    "parameters": {
      "type": "object",
      "properties": {
        "PATH": {
          "type": "string",
          "description": "PATH"
        },
        "recursive": {
          "type": "boolean",
          "description": "Recursively delete a non-empty directory."
        }
      }
    },
    "required": [
      "PATH"
    ]
  },
  {
    "name": "functions_create",
    "description": "Create a function.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "functions_delete",
    "description": "Delete a function.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "force": {
          "type": "boolean",
          "description": "Force deletion even if the function is notempty."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "functions_get",
    "description": "Get a function.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "functions_list",
    "description": "List functions.",
    "parameters": {
      "type": "object",
      "properties": {
        "CATALOG_NAME": {
          "type": "string",
          "description": "CATALOG_NAME"
        },
        "SCHEMA_NAME": {
          "type": "string",
          "description": "SCHEMA_NAME"
        }
      }
    },
    "required": [
      "CATALOG_NAME",
      "SCHEMA_NAME"
    ]
  },
  {
    "name": "functions_update",
    "description": "Update a function.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "owner": {
          "type": "string",
          "description": "Username of current owner of function."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "git-credentials_create",
    "description": "Create a credential entry.",
    "parameters": {
      "type": "object",
      "properties": {
        "GIT_PROVIDER": {
          "type": "string",
          "description": "GIT_PROVIDER"
        },
        "git-username": {
          "type": "string",
          "description": "Git username."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "personal-access-token": {
          "type": "string",
          "description": "The personal access token used to authenticate to the corresponding Git provider."
        }
      }
    },
    "required": [
      "GIT_PROVIDER"
    ]
  },
  {
    "name": "git-credentials_delete",
    "description": "Delete a credential.",
    "parameters": {
      "type": "object",
      "properties": {
        "CREDENTIAL_ID": {
          "type": "string",
          "description": "CREDENTIAL_ID"
        }
      }
    },
    "required": [
      "CREDENTIAL_ID"
    ]
  },
  {
    "name": "git-credentials_get",
    "description": "Get a credential entry.",
    "parameters": {
      "type": "object",
      "properties": {
        "CREDENTIAL_ID": {
          "type": "string",
          "description": "CREDENTIAL_ID"
        }
      }
    },
    "required": [
      "CREDENTIAL_ID"
    ]
  },
  {
    "name": "git-credentials_list",
    "description": "Get Git credentials.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "git-credentials_update",
    "description": "Update a credential.",
    "parameters": {
      "type": "object",
      "properties": {
        "CREDENTIAL_ID": {
          "type": "string",
          "description": "CREDENTIAL_ID"
        },
        "git-provider": {
          "type": "string",
          "description": "Git provider."
        },
        "git-username": {
          "type": "string",
          "description": "Git username."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "personal-access-token": {
          "type": "string",
          "description": "The personal access token used to authenticate to the corresponding Git provider."
        }
      }
    },
    "required": [
      "CREDENTIAL_ID"
    ]
  },
  {
    "name": "global-init-scripts_create",
    "description": "Create init script.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "SCRIPT": {
          "type": "string",
          "description": "SCRIPT"
        },
        "enabled": {
          "type": "boolean",
          "description": "Specifies whether the script is enabled."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "position": {
          "type": "integer",
          "description": "The position of a global init script, where 0 represents the first script to run, 1 is the second script to run, in ascending order."
        }
      }
    },
    "required": [
      "NAME",
      "SCRIPT"
    ]
  },
  {
    "name": "global-init-scripts_delete",
    "description": "Delete init script.",
    "parameters": {
      "type": "object",
      "properties": {
        "SCRIPT_ID": {
          "type": "string",
          "description": "SCRIPT_ID"
        }
      }
    },
    "required": [
      "SCRIPT_ID"
    ]
  },
  {
    "name": "global-init-scripts_get",
    "description": "Get an init script.",
    "parameters": {
      "type": "object",
      "properties": {
        "SCRIPT_ID": {
          "type": "string",
          "description": "SCRIPT_ID"
        }
      }
    },
    "required": [
      "SCRIPT_ID"
    ]
  },
  {
    "name": "global-init-scripts_list",
    "description": "Get init scripts.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "global-init-scripts_update",
    "description": "Update init script.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "SCRIPT": {
          "type": "string",
          "description": "SCRIPT"
        },
        "SCRIPT_ID": {
          "type": "string",
          "description": "SCRIPT_ID"
        },
        "enabled": {
          "type": "boolean",
          "description": "Specifies whether the script is enabled."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "position": {
          "type": "integer",
          "description": "The position of a script, where 0 represents the first script to run, 1 is the second script to run, in ascending order."
        }
      }
    },
    "required": [
      "SCRIPT_ID",
      "NAME",
      "SCRIPT"
    ]
  },
  {
    "name": "grants_get",
    "description": "Get permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        },
        "SECURABLE_TYPE": {
          "type": "string",
          "description": "SECURABLE_TYPE"
        },
        "principal": {
          "type": "string",
          "description": "If provided, only the permissions for the specified principal (user or group) are returned."
        }
      }
    },
    "required": [
      "SECURABLE_TYPE",
      "FULL_NAME"
    ]
  },
  {
    "name": "grants_get-effective",
    "description": "Get effective permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        },
        "SECURABLE_TYPE": {
          "type": "string",
          "description": "SECURABLE_TYPE"
        },
        "principal": {
          "type": "string",
          "description": "If provided, only the effective permissions for the specified principal (user or group) are returned."
        }
      }
    },
    "required": [
      "SECURABLE_TYPE",
      "FULL_NAME"
    ]
  },
  {
    "name": "grants_update",
    "description": "Update permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        },
        "SECURABLE_TYPE": {
          "type": "string",
          "description": "SECURABLE_TYPE"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "SECURABLE_TYPE",
      "FULL_NAME"
    ]
  },
  {
    "name": "groups_create",
    "description": "Create a new group.",
    "parameters": {
      "type": "object",
      "properties": {
        "display-name": {
          "type": "string",
          "description": "String that represents a human-readable group name."
        },
        "external-id": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Databricks group ID."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "groups_delete",
    "description": "Delete a group.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "groups_get",
    "description": "Get group details.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "groups_list",
    "description": "List group details.",
    "parameters": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to return in response."
        },
        "count": {
          "type": "integer",
          "description": "Desired number of results per page."
        },
        "excluded-attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to exclude in response."
        },
        "filter": {
          "type": "string",
          "description": "Query by which the results have to be filtered."
        },
        "sort-by": {
          "type": "string",
          "description": "Attribute to sort the results."
        },
        "sort-order": {
          "type": "string",
          "description": "The order to sort the results."
        },
        "start-index": {
          "type": "integer",
          "description": "Specifies the index of the first result."
        }
      }
    }
  },
  {
    "name": "groups_patch",
    "description": "Update group details.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "groups_update",
    "description": "Replace a group.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "display-name": {
          "type": "string",
          "description": "String that represents a human-readable group name."
        },
        "external-id": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Databricks group ID."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "help",
    "description": "Help about any command",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "instance-pools_create",
    "description": "Create a new instance pool.",
    "parameters": {
      "type": "object",
      "properties": {
        "INSTANCE_POOL_NAME": {
          "type": "string",
          "description": "INSTANCE_POOL_NAME"
        },
        "NODE_TYPE_ID": {
          "type": "string",
          "description": "NODE_TYPE_ID"
        },
        "enable-elastic-disk": {
          "type": "boolean",
          "description": "Autoscaling Local Storage: when enabled, this instances in this pool will dynamically acquire additional disk space when its Spark workers are running low on disk space."
        },
        "idle-instance-autotermination-minutes": {
          "type": "integer",
          "description": "Automatically terminates the extra instances in the pool cache after they are inactive for this time in minutes if min_idle_instances requirement is already met."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "max-capacity": {
          "type": "integer",
          "description": "Maximum number of outstanding instances to keep in the pool, including both instances used by clusters and idle instances."
        },
        "min-idle-instances": {
          "type": "integer",
          "description": "Minimum number of idle instances to keep in the instance pool."
        }
      }
    },
    "required": [
      "INSTANCE_POOL_NAME",
      "NODE_TYPE_ID"
    ]
  },
  {
    "name": "instance-pools_delete",
    "description": "Delete an instance pool.",
    "parameters": {
      "type": "object",
      "properties": {
        "INSTANCE_POOL_ID": {
          "type": "string",
          "description": "INSTANCE_POOL_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "INSTANCE_POOL_ID"
    ]
  },
  {
    "name": "instance-pools_edit",
    "description": "Edit an existing instance pool.",
    "parameters": {
      "type": "object",
      "properties": {
        "INSTANCE_POOL_ID": {
          "type": "string",
          "description": "INSTANCE_POOL_ID"
        },
        "INSTANCE_POOL_NAME": {
          "type": "string",
          "description": "INSTANCE_POOL_NAME"
        },
        "NODE_TYPE_ID": {
          "type": "string",
          "description": "NODE_TYPE_ID"
        },
        "idle-instance-autotermination-minutes": {
          "type": "integer",
          "description": "Automatically terminates the extra instances in the pool cache after they are inactive for this time in minutes if min_idle_instances requirement is already met."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "max-capacity": {
          "type": "integer",
          "description": "Maximum number of outstanding instances to keep in the pool, including both instances used by clusters and idle instances."
        },
        "min-idle-instances": {
          "type": "integer",
          "description": "Minimum number of idle instances to keep in the instance pool."
        }
      }
    },
    "required": [
      "INSTANCE_POOL_ID",
      "INSTANCE_POOL_NAME",
      "NODE_TYPE_ID"
    ]
  },
  {
    "name": "instance-pools_get",
    "description": "Get instance pool information.",
    "parameters": {
      "type": "object",
      "properties": {
        "INSTANCE_POOL_ID": {
          "type": "string",
          "description": "INSTANCE_POOL_ID"
        }
      }
    },
    "required": [
      "INSTANCE_POOL_ID"
    ]
  },
  {
    "name": "instance-pools_get-permission-levels",
    "description": "Get instance pool permission levels.",
    "parameters": {
      "type": "object",
      "properties": {
        "INSTANCE_POOL_ID": {
          "type": "string",
          "description": "INSTANCE_POOL_ID"
        }
      }
    },
    "required": [
      "INSTANCE_POOL_ID"
    ]
  },
  {
    "name": "instance-pools_get-permissions",
    "description": "Get instance pool permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "INSTANCE_POOL_ID": {
          "type": "string",
          "description": "INSTANCE_POOL_ID"
        }
      }
    },
    "required": [
      "INSTANCE_POOL_ID"
    ]
  },
  {
    "name": "instance-pools_list",
    "description": "List instance pool info.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "instance-pools_set-permissions",
    "description": "Set instance pool permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "INSTANCE_POOL_ID": {
          "type": "string",
          "description": "INSTANCE_POOL_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "INSTANCE_POOL_ID"
    ]
  },
  {
    "name": "instance-pools_update-permissions",
    "description": "Update instance pool permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "INSTANCE_POOL_ID": {
          "type": "string",
          "description": "INSTANCE_POOL_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "INSTANCE_POOL_ID"
    ]
  },
  {
    "name": "instance-profiles_add",
    "description": "Register an instance profile.",
    "parameters": {
      "type": "object",
      "properties": {
        "INSTANCE_PROFILE_ARN": {
          "type": "string",
          "description": "INSTANCE_PROFILE_ARN"
        },
        "iam-role-arn": {
          "type": "string",
          "description": "The AWS IAM role ARN of the role associated with the instance profile."
        },
        "is-meta-instance-profile": {
          "type": "boolean",
          "description": "Boolean flag indicating whether the instance profile should only be used in credential passthrough scenarios."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "skip-validation": {
          "type": "boolean",
          "description": "By default, Databricks validates that it has sufficient permissions to launch instances with the instance profile."
        }
      }
    },
    "required": [
      "INSTANCE_PROFILE_ARN"
    ]
  },
  {
    "name": "instance-profiles_edit",
    "description": "Edit an instance profile.",
    "parameters": {
      "type": "object",
      "properties": {
        "INSTANCE_PROFILE_ARN": {
          "type": "string",
          "description": "INSTANCE_PROFILE_ARN"
        },
        "iam-role-arn": {
          "type": "string",
          "description": "The AWS IAM role ARN of the role associated with the instance profile."
        },
        "is-meta-instance-profile": {
          "type": "boolean",
          "description": "Boolean flag indicating whether the instance profile should only be used in credential passthrough scenarios."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "INSTANCE_PROFILE_ARN"
    ]
  },
  {
    "name": "instance-profiles_list",
    "description": "List available instance profiles.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "instance-profiles_remove",
    "description": "Remove the instance profile.",
    "parameters": {
      "type": "object",
      "properties": {
        "INSTANCE_PROFILE_ARN": {
          "type": "string",
          "description": "INSTANCE_PROFILE_ARN"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "INSTANCE_PROFILE_ARN"
    ]
  },
  {
    "name": "ip-access-lists_create",
    "description": "Create access list.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "ip-access-lists_delete",
    "description": "Delete access list.",
    "parameters": {
      "type": "object",
      "properties": {
        "IP_ACCESS_LIST_ID": {
          "type": "string",
          "description": "IP_ACCESS_LIST_ID"
        }
      }
    },
    "required": [
      "IP_ACCESS_LIST_ID"
    ]
  },
  {
    "name": "ip-access-lists_get",
    "description": "Get access list.",
    "parameters": {
      "type": "object",
      "properties": {
        "IP_ACCESS_LIST_ID": {
          "type": "string",
          "description": "IP_ACCESS_LIST_ID"
        }
      }
    },
    "required": [
      "IP_ACCESS_LIST_ID"
    ]
  },
  {
    "name": "ip-access-lists_list",
    "description": "Get access lists.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "ip-access-lists_replace",
    "description": "Replace access list.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "list-id": {
          "type": "string",
          "description": "Universally unique identifier (UUID) of the IP access list."
        }
      }
    }
  },
  {
    "name": "ip-access-lists_update",
    "description": "Update access list.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "list-id": {
          "type": "string",
          "description": "Universally unique identifier (UUID) of the IP access list."
        }
      }
    }
  },
  {
    "name": "jobs_cancel-all-runs",
    "description": "Cancel all runs of a job.",
    "parameters": {
      "type": "object",
      "properties": {
        "all-queued-runs": {
          "type": "boolean",
          "description": "Optional boolean parameter to cancel all queued runs."
        },
        "job-id": {
          "type": "integer",
          "description": "The canonical identifier of the job to cancel all runs of."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "jobs_cancel-run",
    "description": "Cancel a run.",
    "parameters": {
      "type": "object",
      "properties": {
        "RUN_ID": {
          "type": "string",
          "description": "RUN_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach TERMINATED or SKIPPED state"
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach TERMINATED or SKIPPED state"
        }
      }
    },
    "required": [
      "RUN_ID"
    ]
  },
  {
    "name": "jobs_create",
    "description": "Create a new job.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "jobs_delete",
    "description": "Delete a job.",
    "parameters": {
      "type": "object",
      "properties": {
        "JOB_ID": {
          "type": "string",
          "description": "JOB_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "JOB_ID"
    ]
  },
  {
    "name": "jobs_delete-run",
    "description": "Delete a job run.",
    "parameters": {
      "type": "object",
      "properties": {
        "RUN_ID": {
          "type": "string",
          "description": "RUN_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "RUN_ID"
    ]
  },
  {
    "name": "jobs_export-run",
    "description": "Export and retrieve a job run.",
    "parameters": {
      "type": "object",
      "properties": {
        "RUN_ID": {
          "type": "string",
          "description": "RUN_ID"
        },
        "views-to-export": {
          "type": "string",
          "description": "Which views to export (CODE, DASHBOARDS, or ALL)."
        }
      }
    },
    "required": [
      "RUN_ID"
    ]
  },
  {
    "name": "jobs_get",
    "description": "Get a single job.",
    "parameters": {
      "type": "object",
      "properties": {
        "JOB_ID": {
          "type": "string",
          "description": "JOB_ID"
        }
      }
    },
    "required": [
      "JOB_ID"
    ]
  },
  {
    "name": "jobs_get-permission-levels",
    "description": "Get job permission levels.",
    "parameters": {
      "type": "object",
      "properties": {
        "JOB_ID": {
          "type": "string",
          "description": "JOB_ID"
        }
      }
    },
    "required": [
      "JOB_ID"
    ]
  },
  {
    "name": "jobs_get-permissions",
    "description": "Get job permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "JOB_ID": {
          "type": "string",
          "description": "JOB_ID"
        }
      }
    },
    "required": [
      "JOB_ID"
    ]
  },
  {
    "name": "jobs_get-run",
    "description": "Get a single job run.",
    "parameters": {
      "type": "object",
      "properties": {
        "RUN_ID": {
          "type": "string",
          "description": "RUN_ID"
        },
        "include-history": {
          "type": "boolean",
          "description": "Whether to include the repair history in the response."
        },
        "include-resolved-values": {
          "type": "boolean",
          "description": "Whether to include resolved parameter values in the response."
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach TERMINATED or SKIPPED state"
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach TERMINATED or SKIPPED state"
        }
      }
    },
    "required": [
      "RUN_ID"
    ]
  },
  {
    "name": "jobs_get-run-output",
    "description": "Get the output for a single run.",
    "parameters": {
      "type": "object",
      "properties": {
        "RUN_ID": {
          "type": "string",
          "description": "RUN_ID"
        }
      }
    },
    "required": [
      "RUN_ID"
    ]
  },
  {
    "name": "jobs_list",
    "description": "List jobs.",
    "parameters": {
      "type": "object",
      "properties": {
        "expand-tasks": {
          "type": "boolean",
          "description": "Whether to include task and cluster details in the response."
        },
        "limit": {
          "type": "integer",
          "description": "The number of jobs to return."
        },
        "name": {
          "type": "string",
          "description": "A filter on the list based on the exact (case insensitive) job name."
        },
        "offset": {
          "type": "integer",
          "description": "The offset of the first job to return, relative to the most recently created job."
        },
        "page-token": {
          "type": "string",
          "description": "Use next_page_token or prev_page_token returned from the previous request to list the next or previous page of jobs respectively."
        }
      }
    }
  },
  {
    "name": "jobs_list-runs",
    "description": "List job runs.",
    "parameters": {
      "type": "object",
      "properties": {
        "active-only": {
          "type": "boolean",
          "description": "If active_only is true, only active runs are included in the results; otherwise, lists both active and completed runs."
        },
        "completed-only": {
          "type": "boolean",
          "description": "If completed_only is true, only completed runs are included in the results; otherwise, lists both active and completed runs."
        },
        "expand-tasks": {
          "type": "boolean",
          "description": "Whether to include task and cluster details in the response."
        },
        "job-id": {
          "type": "integer",
          "description": "The job for which to list runs."
        },
        "limit": {
          "type": "integer",
          "description": "The number of runs to return."
        },
        "offset": {
          "type": "integer",
          "description": "The offset of the first run to return, relative to the most recent run."
        },
        "page-token": {
          "type": "string",
          "description": "Use next_page_token or prev_page_token returned from the previous request to list the next or previous page of runs respectively."
        },
        "run-type": {
          "type": "string",
          "description": "The type of runs to return."
        },
        "start-time-from": {
          "type": "integer",
          "description": "Show runs that started _at or after_ this value."
        },
        "start-time-to": {
          "type": "integer",
          "description": "Show runs that started _at or before_ this value."
        }
      }
    }
  },
  {
    "name": "jobs_repair-run",
    "description": "Repair a job run.",
    "parameters": {
      "type": "object",
      "properties": {
        "RUN_ID": {
          "type": "string",
          "description": "RUN_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "latest-repair-id": {
          "type": "integer",
          "description": "The ID of the latest repair."
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach TERMINATED or SKIPPED state"
        },
        "rerun-all-failed-tasks": {
          "type": "boolean",
          "description": "If true, repair all failed tasks."
        },
        "rerun-dependent-tasks": {
          "type": "boolean",
          "description": "If true, repair all tasks that depend on the tasks in rerun_tasks, even if they were previously successful."
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach TERMINATED or SKIPPED state"
        }
      }
    },
    "required": [
      "RUN_ID"
    ]
  },
  {
    "name": "jobs_reset",
    "description": "Overwrite all settings for a job.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "jobs_run-now",
    "description": "Trigger a new job run.",
    "parameters": {
      "type": "object",
      "properties": {
        "JOB_ID": {
          "type": "string",
          "description": "JOB_ID"
        },
        "idempotency-token": {
          "type": "string",
          "description": "An optional token to guarantee the idempotency of job run requests."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach TERMINATED or SKIPPED state"
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach TERMINATED or SKIPPED state"
        }
      }
    },
    "required": [
      "JOB_ID"
    ]
  },
  {
    "name": "jobs_set-permissions",
    "description": "Set job permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "JOB_ID": {
          "type": "string",
          "description": "JOB_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "JOB_ID"
    ]
  },
  {
    "name": "jobs_submit",
    "description": "Create and trigger a one-time run.",
    "parameters": {
      "type": "object",
      "properties": {
        "idempotency-token": {
          "type": "string",
          "description": "An optional token that can be used to guarantee the idempotency of job run requests."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach TERMINATED or SKIPPED state"
        },
        "run-name": {
          "type": "string",
          "description": "An optional name for the run."
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach TERMINATED or SKIPPED state"
        },
        "timeout-seconds": {
          "type": "integer",
          "description": "An optional timeout applied to each run of this job."
        }
      }
    }
  },
  {
    "name": "jobs_update",
    "description": "Partially update a job.",
    "parameters": {
      "type": "object",
      "properties": {
        "JOB_ID": {
          "type": "string",
          "description": "JOB_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "JOB_ID"
    ]
  },
  {
    "name": "jobs_update-permissions",
    "description": "Update job permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "JOB_ID": {
          "type": "string",
          "description": "JOB_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "JOB_ID"
    ]
  },
  {
    "name": "labs_clear-cache",
    "description": "Clears cache entries from everywhere relevant",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "labs_install",
    "description": "Installs project",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "labs_installed",
    "description": "List all installed labs",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "labs_list",
    "description": "List all labs",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "labs_show",
    "description": "Shows information about the project",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "labs_uninstall",
    "description": "Uninstalls project",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "labs_upgrade",
    "description": "Upgrades project",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "libraries_all-cluster-statuses",
    "description": "Get all statuses.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "libraries_cluster-status",
    "description": "Get status.",
    "parameters": {
      "type": "object",
      "properties": {
        "CLUSTER_ID": {
          "type": "string",
          "description": "CLUSTER_ID"
        }
      }
    },
    "required": [
      "CLUSTER_ID"
    ]
  },
  {
    "name": "libraries_install",
    "description": "Add a library.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "libraries_uninstall",
    "description": "Uninstall libraries.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "metastores_assign",
    "description": "Create an assignment.",
    "parameters": {
      "type": "object",
      "properties": {
        "DEFAULT_CATALOG_NAME": {
          "type": "string",
          "description": "DEFAULT_CATALOG_NAME"
        },
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        },
        "WORKSPACE_ID": {
          "type": "string",
          "description": "WORKSPACE_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "WORKSPACE_ID",
      "METASTORE_ID",
      "DEFAULT_CATALOG_NAME"
    ]
  },
  {
    "name": "metastores_create",
    "description": "Create a metastore.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "region": {
          "type": "string",
          "description": "Cloud region which the metastore serves (e.g., us-west-2, westus)."
        },
        "storage-root": {
          "type": "string",
          "description": "The storage root URL for metastore."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "metastores_current",
    "description": "Get metastore assignment for workspace.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "metastores_delete",
    "description": "Delete a metastore.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "force": {
          "type": "boolean",
          "description": "Force deletion even if the metastore is not empty."
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "metastores_enable-optimization",
    "description": "Toggle predictive optimization on the metastore.",
    "parameters": {
      "type": "object",
      "properties": {
        "ENABLE": {
          "type": "string",
          "description": "ENABLE"
        },
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "METASTORE_ID",
      "ENABLE"
    ]
  },
  {
    "name": "metastores_get",
    "description": "Get a metastore.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "metastores_list",
    "description": "List metastores.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "metastores_summary",
    "description": "Get a metastore summary.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "metastores_unassign",
    "description": "Delete an assignment.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        },
        "WORKSPACE_ID": {
          "type": "string",
          "description": "WORKSPACE_ID"
        }
      }
    },
    "required": [
      "WORKSPACE_ID",
      "METASTORE_ID"
    ]
  },
  {
    "name": "metastores_update",
    "description": "Update a metastore.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "delta-sharing-organization-name": {
          "type": "string",
          "description": "The organization name of a Delta Sharing entity, to be used in Databricks-to-Databricks Delta Sharing as the official name."
        },
        "delta-sharing-recipient-token-lifetime-in-seconds": {
          "type": "integer",
          "description": "The lifetime of delta sharing recipient token in seconds."
        },
        "delta-sharing-scope": {
          "type": "string",
          "description": "The scope of Delta Sharing enabled for the metastore."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "name": {
          "type": "string",
          "description": "The user-specified name of the metastore."
        },
        "owner": {
          "type": "string",
          "description": "The owner of the metastore."
        },
        "privilege-model-version": {
          "type": "string",
          "description": "Privilege model version of the metastore, of the form major.minor (e.g., 1.0)."
        },
        "storage-root-credential-id": {
          "type": "string",
          "description": "UUID of storage credential to access the metastore storage_root."
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "metastores_update-assignment",
    "description": "Update an assignment.",
    "parameters": {
      "type": "object",
      "properties": {
        "WORKSPACE_ID": {
          "type": "string",
          "description": "WORKSPACE_ID"
        },
        "default-catalog-name": {
          "type": "string",
          "description": "The name of the default catalog for the metastore."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "metastore-id": {
          "type": "string",
          "description": "The unique ID of the metastore."
        }
      }
    },
    "required": [
      "WORKSPACE_ID"
    ]
  },
  {
    "name": "model-registry_approve-transition-request",
    "description": "Approve transition request.",
    "parameters": {
      "type": "object",
      "properties": {
        "ARCHIVE_EXISTING_VERSIONS": {
          "type": "string",
          "description": "ARCHIVE_EXISTING_VERSIONS"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "STAGE": {
          "type": "string",
          "description": "STAGE"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        },
        "comment": {
          "type": "string",
          "description": "User-provided comment on the action."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME",
      "VERSION",
      "STAGE",
      "ARCHIVE_EXISTING_VERSIONS"
    ]
  },
  {
    "name": "model-registry_create-comment",
    "description": "Post a comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "COMMENT": {
          "type": "string",
          "description": "COMMENT"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME",
      "VERSION",
      "COMMENT"
    ]
  },
  {
    "name": "model-registry_create-model",
    "description": "Create a model.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "description": {
          "type": "string",
          "description": "Optional description for registered model."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "model-registry_create-model-version",
    "description": "Create a model version.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "SOURCE": {
          "type": "string",
          "description": "SOURCE"
        },
        "description": {
          "type": "string",
          "description": "Optional description for model version."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "run-id": {
          "type": "string",
          "description": "MLflow run ID for correlation, if source was generated by an experiment run in MLflow tracking server."
        },
        "run-link": {
          "type": "string",
          "description": "MLflow run link - this is the exact link of the run that generated this model version, potentially hosted at another instance of MLflow."
        }
      }
    },
    "required": [
      "NAME",
      "SOURCE"
    ]
  },
  {
    "name": "model-registry_create-transition-request",
    "description": "Make a transition request.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "STAGE": {
          "type": "string",
          "description": "STAGE"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        },
        "comment": {
          "type": "string",
          "description": "User-provided comment on the action."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME",
      "VERSION",
      "STAGE"
    ]
  },
  {
    "name": "model-registry_create-webhook",
    "description": "Create a webhook.",
    "parameters": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "User-specified description for the webhook."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "model-name": {
          "type": "string",
          "description": "Name of the model whose events would trigger this webhook."
        },
        "status": {
          "type": "string",
          "description": "Enable or disable triggering the webhook, or put the webhook into test mode."
        }
      }
    }
  },
  {
    "name": "model-registry_delete-comment",
    "description": "Delete a comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "model-registry_delete-model",
    "description": "Delete a model.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "model-registry_delete-model-tag",
    "description": "Delete a model tag.",
    "parameters": {
      "type": "object",
      "properties": {
        "KEY": {
          "type": "string",
          "description": "KEY"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME",
      "KEY"
    ]
  },
  {
    "name": "model-registry_delete-model-version",
    "description": "Delete a model version.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        }
      }
    },
    "required": [
      "NAME",
      "VERSION"
    ]
  },
  {
    "name": "model-registry_delete-model-version-tag",
    "description": "Delete a model version tag.",
    "parameters": {
      "type": "object",
      "properties": {
        "KEY": {
          "type": "string",
          "description": "KEY"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        }
      }
    },
    "required": [
      "NAME",
      "VERSION",
      "KEY"
    ]
  },
  {
    "name": "model-registry_delete-transition-request",
    "description": "Delete a transition request.",
    "parameters": {
      "type": "object",
      "properties": {
        "CREATOR": {
          "type": "string",
          "description": "CREATOR"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "STAGE": {
          "type": "string",
          "description": "STAGE"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        },
        "comment": {
          "type": "string",
          "description": "User-provided comment on the action."
        }
      }
    },
    "required": [
      "NAME",
      "VERSION",
      "STAGE",
      "CREATOR"
    ]
  },
  {
    "name": "model-registry_delete-webhook",
    "description": "Delete a webhook.",
    "parameters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Webhook ID required to delete a registry webhook."
        }
      }
    }
  },
  {
    "name": "model-registry_get-latest-versions",
    "description": "Get the latest version.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "model-registry_get-model",
    "description": "Get model.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "model-registry_get-model-version",
    "description": "Get a model version.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        }
      }
    },
    "required": [
      "NAME",
      "VERSION"
    ]
  },
  {
    "name": "model-registry_get-model-version-download-uri",
    "description": "Get a model version URI.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        }
      }
    },
    "required": [
      "NAME",
      "VERSION"
    ]
  },
  {
    "name": "model-registry_get-permission-levels",
    "description": "Get registered model permission levels.",
    "parameters": {
      "type": "object",
      "properties": {
        "REGISTERED_MODEL_ID": {
          "type": "string",
          "description": "REGISTERED_MODEL_ID"
        }
      }
    },
    "required": [
      "REGISTERED_MODEL_ID"
    ]
  },
  {
    "name": "model-registry_get-permissions",
    "description": "Get registered model permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "REGISTERED_MODEL_ID": {
          "type": "string",
          "description": "REGISTERED_MODEL_ID"
        }
      }
    },
    "required": [
      "REGISTERED_MODEL_ID"
    ]
  },
  {
    "name": "model-registry_list-models",
    "description": "List models.",
    "parameters": {
      "type": "object",
      "properties": {
        "max-results": {
          "type": "integer",
          "description": "Maximum number of registered models desired."
        },
        "page-token": {
          "type": "string",
          "description": "Pagination token to go to the next page based on a previous query."
        }
      }
    }
  },
  {
    "name": "model-registry_list-transition-requests",
    "description": "List transition requests.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        }
      }
    },
    "required": [
      "NAME",
      "VERSION"
    ]
  },
  {
    "name": "model-registry_list-webhooks",
    "description": "List registry webhooks.",
    "parameters": {
      "type": "object",
      "properties": {
        "model-name": {
          "type": "string",
          "description": "If not specified, all webhooks associated with the specified events are listed, regardless of their associated model."
        },
        "page-token": {
          "type": "string",
          "description": "Token indicating the page of artifact results to fetch."
        }
      }
    }
  },
  {
    "name": "model-registry_reject-transition-request",
    "description": "Reject a transition request.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "STAGE": {
          "type": "string",
          "description": "STAGE"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        },
        "comment": {
          "type": "string",
          "description": "User-provided comment on the action."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME",
      "VERSION",
      "STAGE"
    ]
  },
  {
    "name": "model-registry_rename-model",
    "description": "Rename a model.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "new-name": {
          "type": "string",
          "description": "If provided, updates the name for this registered_model."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "model-registry_search-model-versions",
    "description": "Searches model versions.",
    "parameters": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "String filter condition, like \"name='my-model-name'\"."
        },
        "max-results": {
          "type": "integer",
          "description": "Maximum number of models desired."
        },
        "page-token": {
          "type": "string",
          "description": "Pagination token to go to next page based on previous search query."
        }
      }
    }
  },
  {
    "name": "model-registry_search-models",
    "description": "Search models.",
    "parameters": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "String filter condition, like \"name LIKE 'my-model-name'\"."
        },
        "max-results": {
          "type": "integer",
          "description": "Maximum number of models desired."
        },
        "page-token": {
          "type": "string",
          "description": "Pagination token to go to the next page based on a previous search query."
        }
      }
    }
  },
  {
    "name": "model-registry_set-model-tag",
    "description": "Set a tag.",
    "parameters": {
      "type": "object",
      "properties": {
        "KEY": {
          "type": "string",
          "description": "KEY"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "VALUE": {
          "type": "string",
          "description": "VALUE"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME",
      "KEY",
      "VALUE"
    ]
  },
  {
    "name": "model-registry_set-model-version-tag",
    "description": "Set a version tag.",
    "parameters": {
      "type": "object",
      "properties": {
        "KEY": {
          "type": "string",
          "description": "KEY"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "VALUE": {
          "type": "string",
          "description": "VALUE"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME",
      "VERSION",
      "KEY",
      "VALUE"
    ]
  },
  {
    "name": "model-registry_set-permissions",
    "description": "Set registered model permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "REGISTERED_MODEL_ID": {
          "type": "string",
          "description": "REGISTERED_MODEL_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "REGISTERED_MODEL_ID"
    ]
  },
  {
    "name": "model-registry_test-registry-webhook",
    "description": "Test a webhook.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "event": {
          "type": "string",
          "description": "If event is specified, the test trigger uses the specified event."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "model-registry_transition-stage",
    "description": "Transition a stage.",
    "parameters": {
      "type": "object",
      "properties": {
        "ARCHIVE_EXISTING_VERSIONS": {
          "type": "string",
          "description": "ARCHIVE_EXISTING_VERSIONS"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "STAGE": {
          "type": "string",
          "description": "STAGE"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        },
        "comment": {
          "type": "string",
          "description": "User-provided comment on the action."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME",
      "VERSION",
      "STAGE",
      "ARCHIVE_EXISTING_VERSIONS"
    ]
  },
  {
    "name": "model-registry_update-comment",
    "description": "Update a comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "COMMENT": {
          "type": "string",
          "description": "COMMENT"
        },
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "ID",
      "COMMENT"
    ]
  },
  {
    "name": "model-registry_update-model",
    "description": "Update model.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "description": {
          "type": "string",
          "description": "If provided, updates the description for this registered_model."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "model-registry_update-model-version",
    "description": "Update model version.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        },
        "description": {
          "type": "string",
          "description": "If provided, updates the description for this registered_model."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME",
      "VERSION"
    ]
  },
  {
    "name": "model-registry_update-permissions",
    "description": "Update registered model permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "REGISTERED_MODEL_ID": {
          "type": "string",
          "description": "REGISTERED_MODEL_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "REGISTERED_MODEL_ID"
    ]
  },
  {
    "name": "model-registry_update-webhook",
    "description": "Update a webhook.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "description": {
          "type": "string",
          "description": "User-specified description for the webhook."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "status": {
          "type": "string",
          "description": "Enable or disable triggering the webhook, or put the webhook into test mode."
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "model-versions_delete",
    "description": "Delete a Model Version.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        }
      }
    },
    "required": [
      "FULL_NAME",
      "VERSION"
    ]
  },
  {
    "name": "model-versions_get",
    "description": "Get a Model Version.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        }
      }
    },
    "required": [
      "FULL_NAME",
      "VERSION"
    ]
  },
  {
    "name": "model-versions_get-by-alias",
    "description": "Get Model Version By Alias.",
    "parameters": {
      "type": "object",
      "properties": {
        "ALIAS": {
          "type": "string",
          "description": "ALIAS"
        },
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        }
      }
    },
    "required": [
      "FULL_NAME",
      "ALIAS"
    ]
  },
  {
    "name": "model-versions_list",
    "description": "List Model Versions.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        },
        "max-results": {
          "type": "integer",
          "description": "Max number of model versions to return."
        },
        "page-token": {
          "type": "string",
          "description": "Opaque token to send for the next page of results (pagination)."
        }
      }
    },
    "required": [
      "FULL_NAME"
    ]
  },
  {
    "name": "model-versions_update",
    "description": "Update a Model Version.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        },
        "VERSION": {
          "type": "string",
          "description": "VERSION"
        },
        "comment": {
          "type": "string",
          "description": "The comment attached to the model version."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "FULL_NAME",
      "VERSION"
    ]
  },
  {
    "name": "openai-functions",
    "description": "Databricks function definitions for OpenAI API",
    "parameters": {
      "type": "object",
      "properties": {
        "debug": {
          "type": "boolean",
          "description": "enable debug logging"
        },
        "help": {
          "type": "boolean",
          "description": "help for openai-functions"
        },
        "output": {
          "type": "string",
          "description": "output type: text or json"
        },
        "profile": {
          "type": "string",
          "description": "~/.databrickscfg profile"
        },
        "target": {
          "type": "string",
          "description": "bundle target to use (if applicable)"
        }
      }
    }
  },
  {
    "name": "permissions_get",
    "description": "Get object permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "REQUEST_OBJECT_ID": {
          "type": "string",
          "description": "REQUEST_OBJECT_ID"
        },
        "REQUEST_OBJECT_TYPE": {
          "type": "string",
          "description": "REQUEST_OBJECT_TYPE"
        }
      }
    },
    "required": [
      "REQUEST_OBJECT_TYPE",
      "REQUEST_OBJECT_ID"
    ]
  },
  {
    "name": "permissions_get-permission-levels",
    "description": "Get object permission levels.",
    "parameters": {
      "type": "object",
      "properties": {
        "REQUEST_OBJECT_ID": {
          "type": "string",
          "description": "REQUEST_OBJECT_ID"
        },
        "REQUEST_OBJECT_TYPE": {
          "type": "string",
          "description": "REQUEST_OBJECT_TYPE"
        }
      }
    },
    "required": [
      "REQUEST_OBJECT_TYPE",
      "REQUEST_OBJECT_ID"
    ]
  },
  {
    "name": "permissions_set",
    "description": "Set object permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "REQUEST_OBJECT_ID": {
          "type": "string",
          "description": "REQUEST_OBJECT_ID"
        },
        "REQUEST_OBJECT_TYPE": {
          "type": "string",
          "description": "REQUEST_OBJECT_TYPE"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "REQUEST_OBJECT_TYPE",
      "REQUEST_OBJECT_ID"
    ]
  },
  {
    "name": "permissions_update",
    "description": "Update object permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "REQUEST_OBJECT_ID": {
          "type": "string",
          "description": "REQUEST_OBJECT_ID"
        },
        "REQUEST_OBJECT_TYPE": {
          "type": "string",
          "description": "REQUEST_OBJECT_TYPE"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "REQUEST_OBJECT_TYPE",
      "REQUEST_OBJECT_ID"
    ]
  },
  {
    "name": "pipelines_create",
    "description": "Create a pipeline.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "pipelines_delete",
    "description": "Delete a pipeline.",
    "parameters": {
      "type": "object",
      "properties": {
        "PIPELINE_ID": {
          "type": "string",
          "description": "PIPELINE_ID"
        }
      }
    },
    "required": [
      "PIPELINE_ID"
    ]
  },
  {
    "name": "pipelines_get",
    "description": "Get a pipeline.",
    "parameters": {
      "type": "object",
      "properties": {
        "PIPELINE_ID": {
          "type": "string",
          "description": "PIPELINE_ID"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach RUNNING state"
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach RUNNING state"
        }
      }
    },
    "required": [
      "PIPELINE_ID"
    ]
  },
  {
    "name": "pipelines_get-permission-levels",
    "description": "Get pipeline permission levels.",
    "parameters": {
      "type": "object",
      "properties": {
        "PIPELINE_ID": {
          "type": "string",
          "description": "PIPELINE_ID"
        }
      }
    },
    "required": [
      "PIPELINE_ID"
    ]
  },
  {
    "name": "pipelines_get-permissions",
    "description": "Get pipeline permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "PIPELINE_ID": {
          "type": "string",
          "description": "PIPELINE_ID"
        }
      }
    },
    "required": [
      "PIPELINE_ID"
    ]
  },
  {
    "name": "pipelines_get-update",
    "description": "Get a pipeline update.",
    "parameters": {
      "type": "object",
      "properties": {
        "PIPELINE_ID": {
          "type": "string",
          "description": "PIPELINE_ID"
        },
        "UPDATE_ID": {
          "type": "string",
          "description": "UPDATE_ID"
        }
      }
    },
    "required": [
      "PIPELINE_ID",
      "UPDATE_ID"
    ]
  },
  {
    "name": "pipelines_list-pipeline-events",
    "description": "List pipeline events.",
    "parameters": {
      "type": "object",
      "properties": {
        "PIPELINE_ID": {
          "type": "string",
          "description": "PIPELINE_ID"
        },
        "filter": {
          "type": "string",
          "description": "Criteria to select a subset of results, expressed using a SQL-like syntax."
        },
        "max-results": {
          "type": "integer",
          "description": "Max number of entries to return in a single page."
        },
        "page-token": {
          "type": "string",
          "description": "Page token returned by previous call."
        }
      }
    },
    "required": [
      "PIPELINE_ID"
    ]
  },
  {
    "name": "pipelines_list-pipelines",
    "description": "List pipelines.",
    "parameters": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "Select a subset of results based on the specified criteria."
        },
        "max-results": {
          "type": "integer",
          "description": "The maximum number of entries to return in a single page."
        },
        "page-token": {
          "type": "string",
          "description": "Page token returned by previous call."
        }
      }
    }
  },
  {
    "name": "pipelines_list-updates",
    "description": "List pipeline updates.",
    "parameters": {
      "type": "object",
      "properties": {
        "PIPELINE_ID": {
          "type": "string",
          "description": "PIPELINE_ID"
        },
        "max-results": {
          "type": "integer",
          "description": "Max number of entries to return in a single page."
        },
        "page-token": {
          "type": "string",
          "description": "Page token returned by previous call."
        },
        "until-update-id": {
          "type": "string",
          "description": "If present, returns updates until and including this update_id."
        }
      }
    },
    "required": [
      "PIPELINE_ID"
    ]
  },
  {
    "name": "pipelines_reset",
    "description": "Reset a pipeline.",
    "parameters": {
      "type": "object",
      "properties": {
        "PIPELINE_ID": {
          "type": "string",
          "description": "PIPELINE_ID"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach RUNNING state"
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach RUNNING state"
        }
      }
    },
    "required": [
      "PIPELINE_ID"
    ]
  },
  {
    "name": "pipelines_set-permissions",
    "description": "Set pipeline permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "PIPELINE_ID": {
          "type": "string",
          "description": "PIPELINE_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "PIPELINE_ID"
    ]
  },
  {
    "name": "pipelines_start-update",
    "description": "Start a pipeline.",
    "parameters": {
      "type": "object",
      "properties": {
        "PIPELINE_ID": {
          "type": "string",
          "description": "PIPELINE_ID"
        },
        "cause": {
          "type": "string"
        },
        "full-refresh": {
          "type": "boolean",
          "description": "If true, this update will reset all tables before running."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "PIPELINE_ID"
    ]
  },
  {
    "name": "pipelines_stop",
    "description": "Stop a pipeline.",
    "parameters": {
      "type": "object",
      "properties": {
        "PIPELINE_ID": {
          "type": "string",
          "description": "PIPELINE_ID"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach IDLE state"
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach IDLE state"
        }
      }
    },
    "required": [
      "PIPELINE_ID"
    ]
  },
  {
    "name": "pipelines_update",
    "description": "Edit a pipeline.",
    "parameters": {
      "type": "object",
      "properties": {
        "PIPELINE_ID": {
          "type": "string",
          "description": "PIPELINE_ID"
        },
        "allow-duplicate-names": {
          "type": "boolean",
          "description": "If false, deployment will fail if name has changed and conflicts the name of another pipeline."
        },
        "catalog": {
          "type": "string",
          "description": "A catalog in Unity Catalog to publish data from this pipeline to."
        },
        "channel": {
          "type": "string",
          "description": "DLT Release Channel that specifies which version to use."
        },
        "continuous": {
          "type": "boolean",
          "description": "Whether the pipeline is continuous or triggered."
        },
        "development": {
          "type": "boolean",
          "description": "Whether the pipeline is in Development mode."
        },
        "edition": {
          "type": "string",
          "description": "Pipeline product edition."
        },
        "expected-last-modified": {
          "type": "integer",
          "description": "If present, the last-modified time of the pipeline settings before the edit."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for this pipeline."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "name": {
          "type": "string",
          "description": "Friendly identifier for this pipeline."
        },
        "photon": {
          "type": "boolean",
          "description": "Whether Photon is enabled for this pipeline."
        },
        "pipeline-id": {
          "type": "string",
          "description": "Unique identifier for this pipeline."
        },
        "serverless": {
          "type": "boolean",
          "description": "Whether serverless compute is enabled for this pipeline."
        },
        "storage": {
          "type": "string",
          "description": "DBFS root directory for storing checkpoints and tables."
        },
        "target": {
          "type": "string",
          "description": "Target schema (database) to add tables in this pipeline to."
        }
      }
    },
    "required": [
      "PIPELINE_ID"
    ]
  },
  {
    "name": "pipelines_update-permissions",
    "description": "Update pipeline permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "PIPELINE_ID": {
          "type": "string",
          "description": "PIPELINE_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "PIPELINE_ID"
    ]
  },
  {
    "name": "policy-families_get",
    "description": "Get policy family information.",
    "parameters": {
      "type": "object",
      "properties": {
        "POLICY_FAMILY_ID": {
          "type": "string",
          "description": "POLICY_FAMILY_ID"
        }
      }
    },
    "required": [
      "POLICY_FAMILY_ID"
    ]
  },
  {
    "name": "policy-families_list",
    "description": "List policy families.",
    "parameters": {
      "type": "object",
      "properties": {
        "max-results": {
          "type": "integer",
          "description": "The max number of policy families to return."
        },
        "page-token": {
          "type": "string",
          "description": "A token that can be used to get the next page of results."
        }
      }
    }
  },
  {
    "name": "providers_create",
    "description": "Create an auth provider.",
    "parameters": {
      "type": "object",
      "properties": {
        "AUTHENTICATION_TYPE": {
          "type": "string",
          "description": "AUTHENTICATION_TYPE"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "comment": {
          "type": "string",
          "description": "Description about the provider."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "recipient-profile-str": {
          "type": "string",
          "description": "This field is required when the __authentication_type__ is **TOKEN** or not provided."
        }
      }
    },
    "required": [
      "NAME",
      "AUTHENTICATION_TYPE"
    ]
  },
  {
    "name": "providers_delete",
    "description": "Delete a provider.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "providers_get",
    "description": "Get a provider.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "providers_list",
    "description": "List providers.",
    "parameters": {
      "type": "object",
      "properties": {
        "data-provider-global-metastore-id": {
          "type": "string",
          "description": "If not provided, all providers will be returned."
        }
      }
    }
  },
  {
    "name": "providers_list-shares",
    "description": "List shares by Provider.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "providers_update",
    "description": "Update a provider.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "comment": {
          "type": "string",
          "description": "Description about the provider."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "name": {
          "type": "string",
          "description": "The name of the Provider."
        },
        "owner": {
          "type": "string",
          "description": "Username of Provider owner."
        },
        "recipient-profile-str": {
          "type": "string",
          "description": "This field is required when the __authentication_type__ is **TOKEN** or not provided."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "queries_create",
    "description": "Create a new query definition.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "queries_delete",
    "description": "Delete a query.",
    "parameters": {
      "type": "object",
      "properties": {
        "QUERY_ID": {
          "type": "string",
          "description": "QUERY_ID"
        }
      }
    },
    "required": [
      "QUERY_ID"
    ]
  },
  {
    "name": "queries_get",
    "description": "Get a query definition.",
    "parameters": {
      "type": "object",
      "properties": {
        "QUERY_ID": {
          "type": "string",
          "description": "QUERY_ID"
        }
      }
    },
    "required": [
      "QUERY_ID"
    ]
  },
  {
    "name": "queries_list",
    "description": "Get a list of queries.",
    "parameters": {
      "type": "object",
      "properties": {
        "order": {
          "type": "string",
          "description": "Name of query attribute to order by."
        },
        "page": {
          "type": "integer",
          "description": "Page number to retrieve."
        },
        "page-size": {
          "type": "integer",
          "description": "Number of queries to return per page."
        },
        "q": {
          "type": "string",
          "description": "Full text search term."
        }
      }
    }
  },
  {
    "name": "queries_restore",
    "description": "Restore a query.",
    "parameters": {
      "type": "object",
      "properties": {
        "QUERY_ID": {
          "type": "string",
          "description": "QUERY_ID"
        }
      }
    },
    "required": [
      "QUERY_ID"
    ]
  },
  {
    "name": "queries_update",
    "description": "Change a query definition.",
    "parameters": {
      "type": "object",
      "properties": {
        "QUERY_ID": {
          "type": "string",
          "description": "QUERY_ID"
        },
        "data-source-id": {
          "type": "string",
          "description": "Data source ID."
        },
        "description": {
          "type": "string",
          "description": "General description that conveys additional information about this query such as usage notes."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "name": {
          "type": "string",
          "description": "The title of this query that appears in list views, widget headings, and on the query page."
        },
        "query": {
          "type": "string",
          "description": "The text of the query to be run."
        }
      }
    },
    "required": [
      "QUERY_ID"
    ]
  },
  {
    "name": "query-history_list",
    "description": "List Queries.",
    "parameters": {
      "type": "object",
      "properties": {
        "include-metrics": {
          "type": "boolean",
          "description": "Whether to include metrics about query."
        },
        "max-results": {
          "type": "integer",
          "description": "Limit the number of results returned in one page."
        },
        "page-token": {
          "type": "string",
          "description": "A token that can be used to get the next page of results."
        }
      }
    }
  },
  {
    "name": "recipient-activation_get-activation-url-info",
    "description": "Get a share activation URL.",
    "parameters": {
      "type": "object",
      "properties": {
        "ACTIVATION_URL": {
          "type": "string",
          "description": "ACTIVATION_URL"
        }
      }
    },
    "required": [
      "ACTIVATION_URL"
    ]
  },
  {
    "name": "recipient-activation_retrieve-token",
    "description": "Get an access token.",
    "parameters": {
      "type": "object",
      "properties": {
        "ACTIVATION_URL": {
          "type": "string",
          "description": "ACTIVATION_URL"
        }
      }
    },
    "required": [
      "ACTIVATION_URL"
    ]
  },
  {
    "name": "recipients_create",
    "description": "Create a share recipient.",
    "parameters": {
      "type": "object",
      "properties": {
        "AUTHENTICATION_TYPE": {
          "type": "string",
          "description": "AUTHENTICATION_TYPE"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "comment": {
          "type": "string",
          "description": "Description about the recipient."
        },
        "data-recipient-global-metastore-id": {
          "type": "string",
          "description": "The global Unity Catalog metastore id provided by the data recipient."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "owner": {
          "type": "string",
          "description": "Username of the recipient owner."
        },
        "sharing-code": {
          "type": "string",
          "description": "The one-time sharing code provided by the data recipient."
        }
      }
    },
    "required": [
      "NAME",
      "AUTHENTICATION_TYPE"
    ]
  },
  {
    "name": "recipients_delete",
    "description": "Delete a share recipient.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "recipients_get",
    "description": "Get a share recipient.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "recipients_list",
    "description": "List share recipients.",
    "parameters": {
      "type": "object",
      "properties": {
        "data-recipient-global-metastore-id": {
          "type": "string",
          "description": "If not provided, all recipients will be returned."
        }
      }
    }
  },
  {
    "name": "recipients_rotate-token",
    "description": "Rotate a token.",
    "parameters": {
      "type": "object",
      "properties": {
        "EXISTING_TOKEN_EXPIRE_IN_SECONDS": {
          "type": "string",
          "description": "EXISTING_TOKEN_EXPIRE_IN_SECONDS"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME",
      "EXISTING_TOKEN_EXPIRE_IN_SECONDS"
    ]
  },
  {
    "name": "recipients_share-permissions",
    "description": "Get recipient share permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "recipients_update",
    "description": "Update a share recipient.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "comment": {
          "type": "string",
          "description": "Description about the recipient."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "name": {
          "type": "string",
          "description": "Name of Recipient."
        },
        "owner": {
          "type": "string",
          "description": "Username of the recipient owner."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "registered-models_create",
    "description": "Create a Registered Model.",
    "parameters": {
      "type": "object",
      "properties": {
        "CATALOG_NAME": {
          "type": "string",
          "description": "CATALOG_NAME"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "SCHEMA_NAME": {
          "type": "string",
          "description": "SCHEMA_NAME"
        },
        "comment": {
          "type": "string",
          "description": "The comment attached to the registered model."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "storage-location": {
          "type": "string",
          "description": "The storage location on the cloud under which model version data files are stored."
        }
      }
    },
    "required": [
      "CATALOG_NAME",
      "SCHEMA_NAME",
      "NAME"
    ]
  },
  {
    "name": "registered-models_delete",
    "description": "Delete a Registered Model.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        }
      }
    },
    "required": [
      "FULL_NAME"
    ]
  },
  {
    "name": "registered-models_delete-alias",
    "description": "Delete a Registered Model Alias.",
    "parameters": {
      "type": "object",
      "properties": {
        "ALIAS": {
          "type": "string",
          "description": "ALIAS"
        },
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        }
      }
    },
    "required": [
      "FULL_NAME",
      "ALIAS"
    ]
  },
  {
    "name": "registered-models_get",
    "description": "Get a Registered Model.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        }
      }
    },
    "required": [
      "FULL_NAME"
    ]
  },
  {
    "name": "registered-models_list",
    "description": "List Registered Models.",
    "parameters": {
      "type": "object",
      "properties": {
        "catalog-name": {
          "type": "string",
          "description": "The identifier of the catalog under which to list registered models."
        },
        "max-results": {
          "type": "integer",
          "description": "Max number of registered models to return."
        },
        "page-token": {
          "type": "string",
          "description": "Opaque token to send for the next page of results (pagination)."
        },
        "schema-name": {
          "type": "string",
          "description": "The identifier of the schema under which to list registered models."
        }
      }
    }
  },
  {
    "name": "registered-models_set-alias",
    "description": "Set a Registered Model Alias.",
    "parameters": {
      "type": "object",
      "properties": {
        "ALIAS": {
          "type": "string",
          "description": "ALIAS"
        },
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        },
        "VERSION_NUM": {
          "type": "string",
          "description": "VERSION_NUM"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "FULL_NAME",
      "ALIAS",
      "VERSION_NUM"
    ]
  },
  {
    "name": "registered-models_update",
    "description": "Update a Registered Model.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        },
        "comment": {
          "type": "string",
          "description": "The comment attached to the registered model."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "name": {
          "type": "string",
          "description": "The name of the registered model."
        },
        "owner": {
          "type": "string",
          "description": "The identifier of the user who owns the registered model."
        }
      }
    },
    "required": [
      "FULL_NAME"
    ]
  },
  {
    "name": "repos_create",
    "description": "Create a repo.",
    "parameters": {
      "type": "object",
      "properties": {
        "PROVIDER": {
          "type": "string",
          "description": "PROVIDER"
        },
        "URL": {
          "type": "string",
          "description": "URL"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "path": {
          "type": "string",
          "description": "Desired path for the repo in the workspace."
        }
      }
    },
    "required": [
      "URL",
      "PROVIDER"
    ]
  },
  {
    "name": "repos_delete",
    "description": "Delete a repo.",
    "parameters": {
      "type": "object",
      "properties": {
        "REPO_ID_OR_PATH": {
          "type": "string",
          "description": "REPO_ID_OR_PATH"
        }
      }
    },
    "required": [
      "REPO_ID_OR_PATH"
    ]
  },
  {
    "name": "repos_get",
    "description": "Get a repo.",
    "parameters": {
      "type": "object",
      "properties": {
        "REPO_ID_OR_PATH": {
          "type": "string",
          "description": "REPO_ID_OR_PATH"
        }
      }
    },
    "required": [
      "REPO_ID_OR_PATH"
    ]
  },
  {
    "name": "repos_get-permission-levels",
    "description": "Get repo permission levels.",
    "parameters": {
      "type": "object",
      "properties": {
        "REPO_ID": {
          "type": "string",
          "description": "REPO_ID"
        }
      }
    },
    "required": [
      "REPO_ID"
    ]
  },
  {
    "name": "repos_get-permissions",
    "description": "Get repo permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "REPO_ID": {
          "type": "string",
          "description": "REPO_ID"
        }
      }
    },
    "required": [
      "REPO_ID"
    ]
  },
  {
    "name": "repos_list",
    "description": "Get repos.",
    "parameters": {
      "type": "object",
      "properties": {
        "next-page-token": {
          "type": "string",
          "description": "Token used to get the next page of results."
        },
        "path-prefix": {
          "type": "string",
          "description": "Filters repos that have paths starting with the given path prefix."
        }
      }
    }
  },
  {
    "name": "repos_set-permissions",
    "description": "Set repo permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "REPO_ID": {
          "type": "string",
          "description": "REPO_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "REPO_ID"
    ]
  },
  {
    "name": "repos_update",
    "description": "Update a repo.",
    "parameters": {
      "type": "object",
      "properties": {
        "REPO_ID_OR_PATH": {
          "type": "string",
          "description": "REPO_ID_OR_PATH"
        },
        "branch": {
          "type": "string",
          "description": "Branch that the local version of the repo is checked out to."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "tag": {
          "type": "string",
          "description": "Tag that the local version of the repo is checked out to."
        }
      }
    },
    "required": [
      "REPO_ID_OR_PATH"
    ]
  },
  {
    "name": "repos_update-permissions",
    "description": "Update repo permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "REPO_ID": {
          "type": "string",
          "description": "REPO_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "REPO_ID"
    ]
  },
  {
    "name": "schemas_create",
    "description": "Create a schema.",
    "parameters": {
      "type": "object",
      "properties": {
        "CATALOG_NAME": {
          "type": "string",
          "description": "CATALOG_NAME"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "comment": {
          "type": "string",
          "description": "User-provided free-form text description."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "storage-root": {
          "type": "string",
          "description": "Storage root URL for managed tables within schema."
        }
      }
    },
    "required": [
      "NAME",
      "CATALOG_NAME"
    ]
  },
  {
    "name": "schemas_delete",
    "description": "Delete a schema.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        }
      }
    },
    "required": [
      "FULL_NAME"
    ]
  },
  {
    "name": "schemas_get",
    "description": "Get a schema.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        }
      }
    },
    "required": [
      "FULL_NAME"
    ]
  },
  {
    "name": "schemas_list",
    "description": "List schemas.",
    "parameters": {
      "type": "object",
      "properties": {
        "CATALOG_NAME": {
          "type": "string",
          "description": "CATALOG_NAME"
        }
      }
    },
    "required": [
      "CATALOG_NAME"
    ]
  },
  {
    "name": "schemas_update",
    "description": "Update a schema.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        },
        "comment": {
          "type": "string",
          "description": "User-provided free-form text description."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "name": {
          "type": "string",
          "description": "Name of schema, relative to parent catalog."
        },
        "owner": {
          "type": "string",
          "description": "Username of current owner of schema."
        }
      }
    },
    "required": [
      "FULL_NAME"
    ]
  },
  {
    "name": "secrets_create-scope",
    "description": "Create a new secret scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "SCOPE": {
          "type": "string",
          "description": "SCOPE"
        },
        "initial-manage-principal": {
          "type": "string",
          "description": "The principal that is initially granted MANAGE permission to the created scope."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "scope-backend-type": {
          "type": "string",
          "description": "The backend type the scope will be created with."
        }
      }
    },
    "required": [
      "SCOPE"
    ]
  },
  {
    "name": "secrets_delete-acl",
    "description": "Delete an ACL.",
    "parameters": {
      "type": "object",
      "properties": {
        "PRINCIPAL": {
          "type": "string",
          "description": "PRINCIPAL"
        },
        "SCOPE": {
          "type": "string",
          "description": "SCOPE"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "SCOPE",
      "PRINCIPAL"
    ]
  },
  {
    "name": "secrets_delete-scope",
    "description": "Delete a secret scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "SCOPE": {
          "type": "string",
          "description": "SCOPE"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "SCOPE"
    ]
  },
  {
    "name": "secrets_delete-secret",
    "description": "Delete a secret.",
    "parameters": {
      "type": "object",
      "properties": {
        "KEY": {
          "type": "string",
          "description": "KEY"
        },
        "SCOPE": {
          "type": "string",
          "description": "SCOPE"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "SCOPE",
      "KEY"
    ]
  },
  {
    "name": "secrets_get-acl",
    "description": "Get secret ACL details.",
    "parameters": {
      "type": "object",
      "properties": {
        "PRINCIPAL": {
          "type": "string",
          "description": "PRINCIPAL"
        },
        "SCOPE": {
          "type": "string",
          "description": "SCOPE"
        }
      }
    },
    "required": [
      "SCOPE",
      "PRINCIPAL"
    ]
  },
  {
    "name": "secrets_get-secret",
    "description": "Get a secret.",
    "parameters": {
      "type": "object",
      "properties": {
        "KEY": {
          "type": "string",
          "description": "KEY"
        },
        "SCOPE": {
          "type": "string",
          "description": "SCOPE"
        }
      }
    },
    "required": [
      "SCOPE",
      "KEY"
    ]
  },
  {
    "name": "secrets_list-acls",
    "description": "Lists ACLs.",
    "parameters": {
      "type": "object",
      "properties": {
        "SCOPE": {
          "type": "string",
          "description": "SCOPE"
        }
      }
    },
    "required": [
      "SCOPE"
    ]
  },
  {
    "name": "secrets_list-scopes",
    "description": "List all scopes.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "secrets_list-secrets",
    "description": "List secret keys.",
    "parameters": {
      "type": "object",
      "properties": {
        "SCOPE": {
          "type": "string",
          "description": "SCOPE"
        }
      }
    },
    "required": [
      "SCOPE"
    ]
  },
  {
    "name": "secrets_put-acl",
    "description": "Create/update an ACL.",
    "parameters": {
      "type": "object",
      "properties": {
        "PERMISSION": {
          "type": "string",
          "description": "PERMISSION"
        },
        "PRINCIPAL": {
          "type": "string",
          "description": "PRINCIPAL"
        },
        "SCOPE": {
          "type": "string",
          "description": "SCOPE"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "SCOPE",
      "PRINCIPAL",
      "PERMISSION"
    ]
  },
  {
    "name": "secrets_put-secret",
    "description": "Add a secret.",
    "parameters": {
      "type": "object",
      "properties": {
        "KEY": {
          "type": "string",
          "description": "KEY"
        },
        "SCOPE": {
          "type": "string",
          "description": "SCOPE"
        },
        "bytes-value": {
          "type": "string",
          "description": "If specified, value will be stored as bytes."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "string-value": {
          "type": "string",
          "description": "If specified, note that the value will be stored in UTF-8 (MB4) form."
        }
      }
    },
    "required": [
      "SCOPE",
      "KEY"
    ]
  },
  {
    "name": "service-principals_create",
    "description": "Create a service principal.",
    "parameters": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "If this user is active."
        },
        "application-id": {
          "type": "string",
          "description": "UUID relating to the service principal."
        },
        "display-name": {
          "type": "string",
          "description": "String that represents a concatenation of given and family names."
        },
        "external-id": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Databricks service principal ID."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "service-principals_delete",
    "description": "Delete a service principal.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "service-principals_get",
    "description": "Get service principal details.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "service-principals_list",
    "description": "List service principals.",
    "parameters": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to return in response."
        },
        "count": {
          "type": "integer",
          "description": "Desired number of results per page."
        },
        "excluded-attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to exclude in response."
        },
        "filter": {
          "type": "string",
          "description": "Query by which the results have to be filtered."
        },
        "sort-by": {
          "type": "string",
          "description": "Attribute to sort the results."
        },
        "sort-order": {
          "type": "string",
          "description": "The order to sort the results."
        },
        "start-index": {
          "type": "integer",
          "description": "Specifies the index of the first result."
        }
      }
    }
  },
  {
    "name": "service-principals_patch",
    "description": "Update service principal details.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "service-principals_update",
    "description": "Replace service principal.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "active": {
          "type": "boolean",
          "description": "If this user is active."
        },
        "application-id": {
          "type": "string",
          "description": "UUID relating to the service principal."
        },
        "display-name": {
          "type": "string",
          "description": "String that represents a concatenation of given and family names."
        },
        "external-id": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "Databricks service principal ID."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "serving-endpoints_build-logs",
    "description": "Retrieve the logs associated with building the model's environment for a given serving endpoint's served model.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "SERVED_MODEL_NAME": {
          "type": "string",
          "description": "SERVED_MODEL_NAME"
        }
      }
    },
    "required": [
      "NAME",
      "SERVED_MODEL_NAME"
    ]
  },
  {
    "name": "serving-endpoints_create",
    "description": "Create a new serving endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach NOT_UPDATING state"
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach NOT_UPDATING state"
        }
      }
    }
  },
  {
    "name": "serving-endpoints_delete",
    "description": "Delete a serving endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "serving-endpoints_export-metrics",
    "description": "Retrieve the metrics associated with a serving endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "serving-endpoints_get",
    "description": "Get a single serving endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "serving-endpoints_get-permission-levels",
    "description": "Get serving endpoint permission levels.",
    "parameters": {
      "type": "object",
      "properties": {
        "SERVING_ENDPOINT_ID": {
          "type": "string",
          "description": "SERVING_ENDPOINT_ID"
        }
      }
    },
    "required": [
      "SERVING_ENDPOINT_ID"
    ]
  },
  {
    "name": "serving-endpoints_get-permissions",
    "description": "Get serving endpoint permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "SERVING_ENDPOINT_ID": {
          "type": "string",
          "description": "SERVING_ENDPOINT_ID"
        }
      }
    },
    "required": [
      "SERVING_ENDPOINT_ID"
    ]
  },
  {
    "name": "serving-endpoints_list",
    "description": "Retrieve all serving endpoints.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "serving-endpoints_logs",
    "description": "Retrieve the most recent log lines associated with a given serving endpoint's served model.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "SERVED_MODEL_NAME": {
          "type": "string",
          "description": "SERVED_MODEL_NAME"
        }
      }
    },
    "required": [
      "NAME",
      "SERVED_MODEL_NAME"
    ]
  },
  {
    "name": "serving-endpoints_patch",
    "description": "Patch the tags of a serving endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "serving-endpoints_query",
    "description": "Query a serving endpoint with provided model input.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "serving-endpoints_set-permissions",
    "description": "Set serving endpoint permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "SERVING_ENDPOINT_ID": {
          "type": "string",
          "description": "SERVING_ENDPOINT_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "SERVING_ENDPOINT_ID"
    ]
  },
  {
    "name": "serving-endpoints_update-config",
    "description": "Update a serving endpoint with a new config.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach NOT_UPDATING state"
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach NOT_UPDATING state"
        }
      }
    }
  },
  {
    "name": "serving-endpoints_update-permissions",
    "description": "Update serving endpoint permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "SERVING_ENDPOINT_ID": {
          "type": "string",
          "description": "SERVING_ENDPOINT_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "SERVING_ENDPOINT_ID"
    ]
  },
  {
    "name": "shares_create",
    "description": "Create a share.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "comment": {
          "type": "string",
          "description": "User-provided free-form text description."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "shares_delete",
    "description": "Delete a share.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "shares_get",
    "description": "Get a share.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "include-shared-data": {
          "type": "boolean",
          "description": "Query for data to include in the share."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "shares_list",
    "description": "List shares.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "shares_share-permissions",
    "description": "Get permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "shares_update",
    "description": "Update a share.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "comment": {
          "type": "string",
          "description": "User-provided free-form text description."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "name": {
          "type": "string",
          "description": "Name of the share."
        },
        "owner": {
          "type": "string",
          "description": "Username of current owner of share."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "shares_update-permissions",
    "description": "Update permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "storage-credentials_create",
    "description": "Create a storage credential.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "comment": {
          "type": "string",
          "description": "Comment associated with the credential."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "read-only": {
          "type": "boolean",
          "description": "Whether the storage credential is only usable for read operations."
        },
        "skip-validation": {
          "type": "boolean",
          "description": "Supplying true to this argument skips validation of the created credential."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "storage-credentials_delete",
    "description": "Delete a credential.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "force": {
          "type": "boolean",
          "description": "Force deletion even if there are dependent external locations or external tables."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "storage-credentials_get",
    "description": "Get a credential.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "storage-credentials_list",
    "description": "List credentials.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "storage-credentials_update",
    "description": "Update a credential.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "comment": {
          "type": "string",
          "description": "Comment associated with the credential."
        },
        "force": {
          "type": "boolean",
          "description": "Force update even if there are dependent external locations or external tables."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "name": {
          "type": "string",
          "description": "The credential name."
        },
        "owner": {
          "type": "string",
          "description": "Username of current owner of credential."
        },
        "read-only": {
          "type": "boolean",
          "description": "Whether the storage credential is only usable for read operations."
        },
        "skip-validation": {
          "type": "boolean",
          "description": "Supplying true to this argument skips validation of the updated credential."
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "storage-credentials_validate",
    "description": "Validate a storage credential.",
    "parameters": {
      "type": "object",
      "properties": {
        "external-location-name": {
          "type": "string",
          "description": "The name of an existing external location to validate."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "read-only": {
          "type": "boolean",
          "description": "Whether the storage credential is only usable for read operations."
        },
        "url": {
          "type": "string",
          "description": "The external location url to validate."
        }
      }
    }
  },
  {
    "name": "sync",
    "description": "Synchronize a local directory to a workspace directory",
    "parameters": {
      "type": "object",
      "properties": {
        "DST": {
          "type": "string",
          "description": "DST"
        },
        "SRC": {
          "type": "string",
          "description": "SRC"
        },
        "full": {
          "type": "boolean",
          "description": "perform full synchronization (default is incremental)"
        },
        "interval": {
          "type": "number",
          "description": "file system polling interval (for --watch)"
        },
        "output": {
          "type": "string",
          "description": "type of output format"
        },
        "watch": {
          "type": "boolean",
          "description": "watch local file system for changes"
        }
      }
    },
    "required": [
      "SRC",
      "DST"
    ]
  },
  {
    "name": "system-schemas_disable",
    "description": "Disable a system schema.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        },
        "SCHEMA_NAME": {
          "type": "string",
          "description": "SCHEMA_NAME"
        }
      }
    },
    "required": [
      "METASTORE_ID",
      "SCHEMA_NAME"
    ]
  },
  {
    "name": "system-schemas_enable",
    "description": "Enable a system schema.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        },
        "SCHEMA_NAME": {
          "type": "string",
          "description": "SCHEMA_NAME"
        }
      }
    },
    "required": [
      "METASTORE_ID",
      "SCHEMA_NAME"
    ]
  },
  {
    "name": "system-schemas_list",
    "description": "List system schemas.",
    "parameters": {
      "type": "object",
      "properties": {
        "METASTORE_ID": {
          "type": "string",
          "description": "METASTORE_ID"
        }
      }
    },
    "required": [
      "METASTORE_ID"
    ]
  },
  {
    "name": "table-constraints_create",
    "description": "Create a table constraint.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "table-constraints_delete",
    "description": "Delete a table constraint.",
    "parameters": {
      "type": "object",
      "properties": {
        "CASCADE": {
          "type": "string",
          "description": "CASCADE"
        },
        "CONSTRAINT_NAME": {
          "type": "string",
          "description": "CONSTRAINT_NAME"
        },
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        }
      }
    },
    "required": [
      "FULL_NAME",
      "CONSTRAINT_NAME",
      "CASCADE"
    ]
  },
  {
    "name": "tables_delete",
    "description": "Delete a table.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        }
      }
    },
    "required": [
      "FULL_NAME"
    ]
  },
  {
    "name": "tables_get",
    "description": "Get a table.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        },
        "include-delta-metadata": {
          "type": "boolean",
          "description": "Whether delta metadata should be included in the response."
        }
      }
    },
    "required": [
      "FULL_NAME"
    ]
  },
  {
    "name": "tables_list",
    "description": "List tables.",
    "parameters": {
      "type": "object",
      "properties": {
        "CATALOG_NAME": {
          "type": "string",
          "description": "CATALOG_NAME"
        },
        "SCHEMA_NAME": {
          "type": "string",
          "description": "SCHEMA_NAME"
        },
        "include-delta-metadata": {
          "type": "boolean",
          "description": "Whether delta metadata should be included in the response."
        },
        "max-results": {
          "type": "integer",
          "description": "Maximum number of tables to return (page length)."
        },
        "page-token": {
          "type": "string",
          "description": "Opaque token to send for the next page of results (pagination)."
        }
      }
    },
    "required": [
      "CATALOG_NAME",
      "SCHEMA_NAME"
    ]
  },
  {
    "name": "tables_list-summaries",
    "description": "List table summaries.",
    "parameters": {
      "type": "object",
      "properties": {
        "CATALOG_NAME": {
          "type": "string",
          "description": "CATALOG_NAME"
        },
        "max-results": {
          "type": "integer",
          "description": "Maximum number of tables to return (page length)."
        },
        "page-token": {
          "type": "string",
          "description": "Opaque token to send for the next page of results (pagination)."
        },
        "schema-name-pattern": {
          "type": "string",
          "description": "A sql LIKE pattern (% and _) for schema names."
        },
        "table-name-pattern": {
          "type": "string",
          "description": "A sql LIKE pattern (% and _) for table names."
        }
      }
    },
    "required": [
      "CATALOG_NAME"
    ]
  },
  {
    "name": "tables_update",
    "description": "Update a table owner.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME": {
          "type": "string",
          "description": "FULL_NAME"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "owner": {
          "type": "string"
        }
      }
    },
    "required": [
      "FULL_NAME"
    ]
  },
  {
    "name": "token-management_create-obo-token",
    "description": "Create on-behalf token.",
    "parameters": {
      "type": "object",
      "properties": {
        "APPLICATION_ID": {
          "type": "string",
          "description": "APPLICATION_ID"
        },
        "LIFETIME_SECONDS": {
          "type": "string",
          "description": "LIFETIME_SECONDS"
        },
        "comment": {
          "type": "string",
          "description": "Comment that describes the purpose of the token."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "APPLICATION_ID",
      "LIFETIME_SECONDS"
    ]
  },
  {
    "name": "token-management_delete",
    "description": "Delete a token.",
    "parameters": {
      "type": "object",
      "properties": {
        "TOKEN_ID": {
          "type": "string",
          "description": "TOKEN_ID"
        }
      }
    },
    "required": [
      "TOKEN_ID"
    ]
  },
  {
    "name": "token-management_get",
    "description": "Get token info.",
    "parameters": {
      "type": "object",
      "properties": {
        "TOKEN_ID": {
          "type": "string",
          "description": "TOKEN_ID"
        }
      }
    },
    "required": [
      "TOKEN_ID"
    ]
  },
  {
    "name": "token-management_get-permission-levels",
    "description": "Get token permission levels.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "token-management_get-permissions",
    "description": "Get token permissions.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "token-management_list",
    "description": "List all tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "created-by-id": {
          "type": "string",
          "description": "User ID of the user that created the token."
        },
        "created-by-username": {
          "type": "string",
          "description": "Username of the user that created the token."
        }
      }
    }
  },
  {
    "name": "token-management_set-permissions",
    "description": "Set token permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "token-management_update-permissions",
    "description": "Update token permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "tokens_create",
    "description": "Create a user token.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "description": "Optional description to attach to the token."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "lifetime-seconds": {
          "type": "integer",
          "description": "The lifetime of the token, in seconds."
        }
      }
    }
  },
  {
    "name": "tokens_delete",
    "description": "Revoke token.",
    "parameters": {
      "type": "object",
      "properties": {
        "TOKEN_ID": {
          "type": "string",
          "description": "TOKEN_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "TOKEN_ID"
    ]
  },
  {
    "name": "tokens_list",
    "description": "List tokens.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "users_create",
    "description": "Create a new user.",
    "parameters": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "If this user is active."
        },
        "display-name": {
          "type": "string",
          "description": "String that represents a concatenation of given and family names."
        },
        "external-id": {
          "type": "string",
          "description": "External ID is not currently supported."
        },
        "id": {
          "type": "string",
          "description": "Databricks user ID."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "user-name": {
          "type": "string",
          "description": "Email address of the Databricks user."
        }
      }
    }
  },
  {
    "name": "users_delete",
    "description": "Delete a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "users_get",
    "description": "Get user details.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to return in response."
        },
        "count": {
          "type": "integer",
          "description": "Desired number of results per page."
        },
        "excluded-attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to exclude in response."
        },
        "filter": {
          "type": "string",
          "description": "Query by which the results have to be filtered."
        },
        "sort-by": {
          "type": "string",
          "description": "Attribute to sort the results."
        },
        "sort-order": {
          "type": "string",
          "description": "The order to sort the results."
        },
        "start-index": {
          "type": "integer",
          "description": "Specifies the index of the first result."
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "users_get-permission-levels",
    "description": "Get password permission levels.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "users_get-permissions",
    "description": "Get password permissions.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "users_list",
    "description": "List users.",
    "parameters": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to return in response."
        },
        "count": {
          "type": "integer",
          "description": "Desired number of results per page."
        },
        "excluded-attributes": {
          "type": "string",
          "description": "Comma-separated list of attributes to exclude in response."
        },
        "filter": {
          "type": "string",
          "description": "Query by which the results have to be filtered."
        },
        "sort-by": {
          "type": "string",
          "description": "Attribute to sort the results."
        },
        "sort-order": {
          "type": "string",
          "description": "The order to sort the results."
        },
        "start-index": {
          "type": "integer",
          "description": "Specifies the index of the first result."
        }
      }
    }
  },
  {
    "name": "users_patch",
    "description": "Update user details.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "users_set-permissions",
    "description": "Set password permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "users_update",
    "description": "Replace a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "active": {
          "type": "boolean",
          "description": "If this user is active."
        },
        "display-name": {
          "type": "string",
          "description": "String that represents a concatenation of given and family names."
        },
        "external-id": {
          "type": "string",
          "description": "External ID is not currently supported."
        },
        "id": {
          "type": "string",
          "description": "Databricks user ID."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "user-name": {
          "type": "string",
          "description": "Email address of the Databricks user."
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "users_update-permissions",
    "description": "Update password permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    }
  },
  {
    "name": "version",
    "description": "Retrieve information about the current version of this CLI",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "volumes_create",
    "description": "Create a Volume.",
    "parameters": {
      "type": "object",
      "properties": {
        "CATALOG_NAME": {
          "type": "string",
          "description": "CATALOG_NAME"
        },
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "SCHEMA_NAME": {
          "type": "string",
          "description": "SCHEMA_NAME"
        },
        "VOLUME_TYPE": {
          "type": "string",
          "description": "VOLUME_TYPE"
        },
        "comment": {
          "type": "string",
          "description": "The comment attached to the volume."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "storage-location": {
          "type": "string",
          "description": "The storage location on the cloud."
        }
      }
    },
    "required": [
      "CATALOG_NAME",
      "SCHEMA_NAME",
      "NAME",
      "VOLUME_TYPE"
    ]
  },
  {
    "name": "volumes_delete",
    "description": "Delete a Volume.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME_ARG": {
          "type": "string",
          "description": "FULL_NAME_ARG"
        }
      }
    },
    "required": [
      "FULL_NAME_ARG"
    ]
  },
  {
    "name": "volumes_list",
    "description": "List Volumes.",
    "parameters": {
      "type": "object",
      "properties": {
        "CATALOG_NAME": {
          "type": "string",
          "description": "CATALOG_NAME"
        },
        "SCHEMA_NAME": {
          "type": "string",
          "description": "SCHEMA_NAME"
        }
      }
    },
    "required": [
      "CATALOG_NAME",
      "SCHEMA_NAME"
    ]
  },
  {
    "name": "volumes_read",
    "description": "Get a Volume.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME_ARG": {
          "type": "string",
          "description": "FULL_NAME_ARG"
        }
      }
    },
    "required": [
      "FULL_NAME_ARG"
    ]
  },
  {
    "name": "volumes_update",
    "description": "Update a Volume.",
    "parameters": {
      "type": "object",
      "properties": {
        "FULL_NAME_ARG": {
          "type": "string",
          "description": "FULL_NAME_ARG"
        },
        "comment": {
          "type": "string",
          "description": "The comment attached to the volume."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "name": {
          "type": "string",
          "description": "The name of the volume."
        },
        "owner": {
          "type": "string",
          "description": "The identifier of the user who owns the volume."
        }
      }
    },
    "required": [
      "FULL_NAME_ARG"
    ]
  },
  {
    "name": "warehouses_create",
    "description": "Create a warehouse.",
    "parameters": {
      "type": "object",
      "properties": {
        "auto-stop-mins": {
          "type": "integer",
          "description": "The amount of time in minutes that a SQL warehouse must be idle (i.e., no RUNNING queries) before it is automatically stopped."
        },
        "cluster-size": {
          "type": "string",
          "description": "Size of the clusters allocated for this warehouse."
        },
        "creator-name": {
          "type": "string",
          "description": "warehouse creator name."
        },
        "enable-photon": {
          "type": "boolean",
          "description": "Configures whether the warehouse should use Photon optimized clusters."
        },
        "enable-serverless-compute": {
          "type": "boolean",
          "description": "Configures whether the warehouse should use serverless compute."
        },
        "instance-profile-arn": {
          "type": "string",
          "description": "Deprecated."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "max-num-clusters": {
          "type": "integer",
          "description": "Maximum number of clusters that the autoscaler will create to handle concurrent queries."
        },
        "min-num-clusters": {
          "type": "integer",
          "description": "Minimum number of available clusters that will be maintained for this SQL warehouse."
        },
        "name": {
          "type": "string",
          "description": "Logical name for the cluster."
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach RUNNING state"
        },
        "spot-instance-policy": {
          "type": "string",
          "description": "Configurations whether the warehouse should use spot instances."
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach RUNNING state"
        },
        "warehouse-type": {
          "type": "string",
          "description": "Warehouse type: PRO or CLASSIC."
        }
      }
    }
  },
  {
    "name": "warehouses_delete",
    "description": "Delete a warehouse.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "warehouses_edit",
    "description": "Update a warehouse.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "auto-stop-mins": {
          "type": "integer",
          "description": "The amount of time in minutes that a SQL warehouse must be idle (i.e., no RUNNING queries) before it is automatically stopped."
        },
        "cluster-size": {
          "type": "string",
          "description": "Size of the clusters allocated for this warehouse."
        },
        "creator-name": {
          "type": "string",
          "description": "warehouse creator name."
        },
        "enable-photon": {
          "type": "boolean",
          "description": "Configures whether the warehouse should use Photon optimized clusters."
        },
        "enable-serverless-compute": {
          "type": "boolean",
          "description": "Configures whether the warehouse should use serverless compute."
        },
        "instance-profile-arn": {
          "type": "string",
          "description": "Deprecated."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "max-num-clusters": {
          "type": "integer",
          "description": "Maximum number of clusters that the autoscaler will create to handle concurrent queries."
        },
        "min-num-clusters": {
          "type": "integer",
          "description": "Minimum number of available clusters that will be maintained for this SQL warehouse."
        },
        "name": {
          "type": "string",
          "description": "Logical name for the cluster."
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach RUNNING state"
        },
        "spot-instance-policy": {
          "type": "string",
          "description": "Configurations whether the warehouse should use spot instances."
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach RUNNING state"
        },
        "warehouse-type": {
          "type": "string",
          "description": "Warehouse type: PRO or CLASSIC."
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "warehouses_get",
    "description": "Get warehouse info.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach RUNNING state"
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach RUNNING state"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "warehouses_get-permission-levels",
    "description": "Get SQL warehouse permission levels.",
    "parameters": {
      "type": "object",
      "properties": {
        "WAREHOUSE_ID": {
          "type": "string",
          "description": "WAREHOUSE_ID"
        }
      }
    },
    "required": [
      "WAREHOUSE_ID"
    ]
  },
  {
    "name": "warehouses_get-permissions",
    "description": "Get SQL warehouse permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "WAREHOUSE_ID": {
          "type": "string",
          "description": "WAREHOUSE_ID"
        }
      }
    },
    "required": [
      "WAREHOUSE_ID"
    ]
  },
  {
    "name": "warehouses_get-workspace-warehouse-config",
    "description": "Get the workspace configuration.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  },
  {
    "name": "warehouses_list",
    "description": "List warehouses.",
    "parameters": {
      "type": "object",
      "properties": {
        "run-as-user-id": {
          "type": "integer",
          "description": "Service Principal which will be used to fetch the list of warehouses."
        }
      }
    }
  },
  {
    "name": "warehouses_set-permissions",
    "description": "Set SQL warehouse permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "WAREHOUSE_ID": {
          "type": "string",
          "description": "WAREHOUSE_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "WAREHOUSE_ID"
    ]
  },
  {
    "name": "warehouses_set-workspace-warehouse-config",
    "description": "Set the workspace configuration.",
    "parameters": {
      "type": "object",
      "properties": {
        "google-service-account": {
          "type": "string",
          "description": "GCP only: Google Service Account used to pass to cluster to access Google Cloud Storage."
        },
        "instance-profile-arn": {
          "type": "string",
          "description": "AWS Only: Instance profile used to pass IAM role to the cluster."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "security-policy": {
          "type": "string",
          "description": "Security policy for warehouses."
        }
      }
    }
  },
  {
    "name": "warehouses_start",
    "description": "Start a warehouse.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach RUNNING state"
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach RUNNING state"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "warehouses_stop",
    "description": "Stop a warehouse.",
    "parameters": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "ID"
        },
        "no-wait": {
          "type": "boolean",
          "description": "do not wait to reach STOPPED state"
        },
        "timeout": {
          "type": "number",
          "description": "maximum amount of time to reach STOPPED state"
        }
      }
    },
    "required": [
      "ID"
    ]
  },
  {
    "name": "warehouses_update-permissions",
    "description": "Update SQL warehouse permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "WAREHOUSE_ID": {
          "type": "string",
          "description": "WAREHOUSE_ID"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "WAREHOUSE_ID"
    ]
  },
  {
    "name": "workspace_delete",
    "description": "Delete a workspace object.",
    "parameters": {
      "type": "object",
      "properties": {
        "PATH": {
          "type": "string",
          "description": "PATH"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "recursive": {
          "type": "boolean",
          "description": "The flag that specifies whether to delete the object recursively."
        }
      }
    },
    "required": [
      "PATH"
    ]
  },
  {
    "name": "workspace_export",
    "description": "Export a workspace object.",
    "parameters": {
      "type": "object",
      "properties": {
        "SOURCE_PATH": {
          "type": "string",
          "description": "SOURCE_PATH"
        },
        "file": {
          "type": "string",
          "description": "Path on the local file system to save exported file at."
        },
        "format": {
          "type": "string",
          "description": "This specifies the format of the exported file."
        }
      }
    },
    "required": [
      "SOURCE_PATH"
    ]
  },
  {
    "name": "workspace_export-dir",
    "description": "Export a directory from a Databricks workspace to the local file system.",
    "parameters": {
      "type": "object",
      "properties": {
        "SOURCE_PATH": {
          "type": "string",
          "description": "SOURCE_PATH"
        },
        "TARGET_PATH": {
          "type": "string",
          "description": "TARGET_PATH"
        },
        "overwrite": {
          "type": "boolean",
          "description": "overwrite existing local files"
        }
      }
    },
    "required": [
      "SOURCE_PATH",
      "TARGET_PATH"
    ]
  },
  {
    "name": "workspace_get-permission-levels",
    "description": "Get workspace object permission levels.",
    "parameters": {
      "type": "object",
      "properties": {
        "WORKSPACE_OBJECT_ID": {
          "type": "string",
          "description": "WORKSPACE_OBJECT_ID"
        },
        "WORKSPACE_OBJECT_TYPE": {
          "type": "string",
          "description": "WORKSPACE_OBJECT_TYPE"
        }
      }
    },
    "required": [
      "WORKSPACE_OBJECT_TYPE",
      "WORKSPACE_OBJECT_ID"
    ]
  },
  {
    "name": "workspace_get-permissions",
    "description": "Get workspace object permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "WORKSPACE_OBJECT_ID": {
          "type": "string",
          "description": "WORKSPACE_OBJECT_ID"
        },
        "WORKSPACE_OBJECT_TYPE": {
          "type": "string",
          "description": "WORKSPACE_OBJECT_TYPE"
        }
      }
    },
    "required": [
      "WORKSPACE_OBJECT_TYPE",
      "WORKSPACE_OBJECT_ID"
    ]
  },
  {
    "name": "workspace_get-status",
    "description": "Get status.",
    "parameters": {
      "type": "object",
      "properties": {
        "PATH": {
          "type": "string",
          "description": "PATH"
        }
      }
    },
    "required": [
      "PATH"
    ]
  },
  {
    "name": "workspace_import",
    "description": "Import a workspace object.",
    "parameters": {
      "type": "object",
      "properties": {
        "TARGET_PATH": {
          "type": "string",
          "description": "TARGET_PATH"
        },
        "content": {
          "type": "string",
          "description": "The base64-encoded content."
        },
        "file": {
          "type": "string",
          "description": "Path of local file to import"
        },
        "format": {
          "type": "string",
          "description": "This specifies the format of the file to be imported."
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        },
        "language": {
          "type": "string",
          "description": "The language of the object."
        },
        "overwrite": {
          "type": "boolean",
          "description": "The flag that specifies whether to overwrite existing object."
        }
      }
    },
    "required": [
      "TARGET_PATH"
    ]
  },
  {
    "name": "workspace_import-dir",
    "description": "Import a directory from the local filesystem to a Databricks workspace.",
    "parameters": {
      "type": "object",
      "properties": {
        "SOURCE_PATH": {
          "type": "string",
          "description": "SOURCE_PATH"
        },
        "TARGET_PATH": {
          "type": "string",
          "description": "TARGET_PATH"
        },
        "overwrite": {
          "type": "boolean",
          "description": "overwrite existing workspace files"
        }
      }
    },
    "required": [
      "SOURCE_PATH",
      "TARGET_PATH"
    ]
  },
  {
    "name": "workspace_list",
    "description": "List contents.",
    "parameters": {
      "type": "object",
      "properties": {
        "PATH": {
          "type": "string",
          "description": "PATH"
        },
        "notebooks-modified-after": {
          "type": "integer",
          "description": "UTC timestamp in milliseconds."
        }
      }
    },
    "required": [
      "PATH"
    ]
  },
  {
    "name": "workspace_mkdirs",
    "description": "Create a directory.",
    "parameters": {
      "type": "object",
      "properties": {
        "PATH": {
          "type": "string",
          "description": "PATH"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "PATH"
    ]
  },
  {
    "name": "workspace_set-permissions",
    "description": "Set workspace object permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "WORKSPACE_OBJECT_ID": {
          "type": "string",
          "description": "WORKSPACE_OBJECT_ID"
        },
        "WORKSPACE_OBJECT_TYPE": {
          "type": "string",
          "description": "WORKSPACE_OBJECT_TYPE"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "WORKSPACE_OBJECT_TYPE",
      "WORKSPACE_OBJECT_ID"
    ]
  },
  {
    "name": "workspace_update-permissions",
    "description": "Update workspace object permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "WORKSPACE_OBJECT_ID": {
          "type": "string",
          "description": "WORKSPACE_OBJECT_ID"
        },
        "WORKSPACE_OBJECT_TYPE": {
          "type": "string",
          "description": "WORKSPACE_OBJECT_TYPE"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "WORKSPACE_OBJECT_TYPE",
      "WORKSPACE_OBJECT_ID"
    ]
  },
  {
    "name": "workspace-bindings_get",
    "description": "Get catalog workspace bindings.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "workspace-bindings_get-bindings",
    "description": "Get securable workspace bindings.",
    "parameters": {
      "type": "object",
      "properties": {
        "SECURABLE_NAME": {
          "type": "string",
          "description": "SECURABLE_NAME"
        },
        "SECURABLE_TYPE": {
          "type": "string",
          "description": "SECURABLE_TYPE"
        }
      }
    },
    "required": [
      "SECURABLE_TYPE",
      "SECURABLE_NAME"
    ]
  },
  {
    "name": "workspace-bindings_update",
    "description": "Update catalog workspace bindings.",
    "parameters": {
      "type": "object",
      "properties": {
        "NAME": {
          "type": "string",
          "description": "NAME"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "NAME"
    ]
  },
  {
    "name": "workspace-bindings_update-bindings",
    "description": "Update securable workspace bindings.",
    "parameters": {
      "type": "object",
      "properties": {
        "SECURABLE_NAME": {
          "type": "string",
          "description": "SECURABLE_NAME"
        },
        "SECURABLE_TYPE": {
          "type": "string",
          "description": "SECURABLE_TYPE"
        },
        "json": {
          "type": "object",
          "description": "either inline JSON string or @path/to/file.json with request body"
        }
      }
    },
    "required": [
      "SECURABLE_TYPE",
      "SECURABLE_NAME"
    ]
  },
  {
    "name": "workspace-conf_get-status",
    "description": "Check configuration status.",
    "parameters": {
      "type": "object",
      "properties": {
        "KEYS": {
          "type": "string",
          "description": "KEYS"
        }
      }
    },
    "required": [
      "KEYS"
    ]
  },
  {
    "name": "workspace-conf_set-status",
    "description": "Enable/disable features.",
    "parameters": {
      "type": "object",
      "properties": {}
    }
  }
]
