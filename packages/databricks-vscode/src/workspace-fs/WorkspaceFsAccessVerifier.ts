import {Cluster, WorkspaceFsEntity, WorkspaceFsUtils} from "../sdk-extensions";
import {Disposable, window, EventEmitter} from "vscode";
import {ConnectionManager} from "../configuration/ConnectionManager";

async function dbrBelowThreshold(cluster: Cluster) {
    const dbrVersionParts = cluster.dbrVersion!;
    return (
        (dbrVersionParts[0] !== "x" && dbrVersionParts[0] < 11) ||
        (dbrVersionParts[0] === 11 &&
            dbrVersionParts[1] !== "x" &&
            dbrVersionParts[1] < 2)
    );
}

export class WorkspaceFsAccessVerifier implements Disposable {
    private disposables: Disposable[] = [];
    private currentCluster: Cluster | undefined;
    private _isEnabled: boolean | undefined;
    private readonly onDidChangeStateEmitter = new EventEmitter<
        boolean | undefined
    >();
    readonly onDidChangeState = this.onDidChangeStateEmitter.event;

    private set isEnabled(value: boolean | undefined) {
        if (this._isEnabled !== value) {
            this.onDidChangeStateEmitter.fire(value);
        }
        this._isEnabled = value;
    }

    public get isEnabled() {
        return this._isEnabled;
    }

    constructor(private connectionManager: ConnectionManager) {
        this.disposables.push(
            this.connectionManager.onDidChangeCluster(async (cluster) => {
                if (this.currentCluster?.name === cluster?.name) {
                    return;
                }
                this.currentCluster = cluster;
                this.verifyCluster(cluster);
            }),
            this.connectionManager.onDidChangeState(async (state) => {
                if (state === "CONNECTED") {
                    await this.verifyWorkspaceConfigs();
                } else {
                    this.isEnabled = undefined;
                }
            })
        );
    }

    async verifyCluster(cluster?: Cluster) {
        if (cluster === undefined) {
            return;
        }
        if (await dbrBelowThreshold(cluster)) {
            const message =
                "Files in workspace is not supported on clusters with DBR < 11.2. The Databricks extension will not work correctly.";
            await window.showErrorMessage(message);
        }
    }

    async isEnabledForWorkspace() {
        if (this.connectionManager.state === "DISCONNECTED") {
            return false;
        }
        await this.connectionManager.waitForConnect();
        if (this.isEnabled !== undefined) {
            return this.isEnabled;
        }
        const rootPath =
            this.connectionManager.databricksWorkspace?.workspaceFsRoot;
        if (!rootPath || !this.connectionManager.workspaceClient) {
            return false;
        }

        const rootDir = await WorkspaceFsEntity.fromPath(
            this.connectionManager.workspaceClient,
            rootPath.path
        );

        if (!WorkspaceFsUtils.isDirectory(rootDir)) {
            return false;
        }

        try {
            await rootDir.createFile(
                ".sentinal.tmp",
                "This file is autogenerated by the Databricks Extension for VS Code"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                if (
                    e.message.match(
                        /.*(Files in Workspace is disabled|FEATURE_DISABLED).*/
                    )
                ) {
                    this.isEnabled = false;
                    return this.isEnabled;
                }
            }
        }

        this.isEnabled = true;
        return this.isEnabled;
    }

    async verifyWorkspaceConfigs() {
        if (!(await this.isEnabledForWorkspace())) {
            await window.showErrorMessage(
                "Files in workspace is not enabled for your workspace. The Databricks extension will not work correctly."
            );
        }
    }

    dispose() {
        this.disposables.forEach((i) => i.dispose());
    }
}
