{
    "name": "databricks",
    "displayName": "Databricks",
    "description": "IDE support for Databricks",
    "publisher": "databricks",
    "license": "LicenseRef-LICENSE",
    "version": "1.3.1",
    "engines": {
        "vscode": "^1.83.0"
    },
    "categories": [
        "Data Science",
        "Machine Learning"
    ],
    "keywords": [
        "spark",
        "databricks",
        "machine learning",
        "ml",
        "data science",
        "ds",
        "lakehouse"
    ],
    "pricing": "Free",
    "badges": [],
    "icon": "images/databricks-logo.png",
    "galleryBanner": {
        "theme": "light"
    },
    "homepage": "https://github.com/databricks/databricks-vscode/blob/main/README.md",
    "bugs": {
        "url": "https://github.com/databricks/databricks-vscode/issues"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/databricks/databricks-vscode.git"
    },
    "activationEvents": [
        "onCommand:databricks.*",
        "onTaskType:databricks",
        "onDebugResolve:databricks",
        "onDebugResolve:databricks-workflow",
        "workspaceContains:**/databricks.yml",
        "workspaceContains:**/bundle.yml",
        "workspaceContains:**/databricks.yaml",
        "workspaceContains:**/bundle.yaml",
        "workspaceContains:.databricks"
    ],
    "main": "out/extension.js",
    "types": "out/extension.d.ts",
    "contributes": {
        "commands": [
            {
                "command": "databricks.connection.logout",
                "title": "Logout",
                "category": "Databricks",
                "enablement": "databricks.context.activated && databricks.context.loggedIn"
            },
            {
                "command": "databricks.connection.configureWorkspace",
                "icon": "$(gear)",
                "title": "Configure workspace",
                "enablement": "databricks.context.activated",
                "category": "Databricks"
            },
            {
                "command": "databricks.connection.openDatabricksConfigFile",
                "title": "Open Databricks configuration file",
                "enablement": "databricks.context.activated",
                "category": "Databricks"
            },
            {
                "command": "databricks.connection.attachCluster",
                "title": "Attach cluster",
                "enablement": "databricks.context.activated && databricks.context.loggedIn",
                "icon": "$(plug)"
            },
            {
                "command": "databricks.connection.attachClusterQuickPick",
                "title": "Configure cluster",
                "category": "Databricks",
                "enablement": "databricks.context.activated && databricks.context.loggedIn",
                "icon": "$(gear)"
            },
            {
                "command": "databricks.connection.detachCluster",
                "title": "Detach cluster",
                "category": "Databricks",
                "enablement": "databricks.context.activated && databricks.context.loggedIn",
                "icon": "$(debug-disconnect)"
            },
            {
                "command": "databricks.sync.start",
                "title": "Start synchronization",
                "category": "Databricks",
                "enablement": "databricks.context.activated && databricks.context.loggedIn",
                "icon": "$(sync)"
            },
            {
                "command": "databricks.sync.startFull",
                "title": "Start synchronization (full sync)",
                "category": "Databricks",
                "enablement": "databricks.context.activated && databricks.context.loggedIn",
                "icon": "$(sync)"
            },
            {
                "command": "databricks.sync.stop",
                "title": "Stop synchronization",
                "category": "Databricks",
                "enablement": "databricks.context.activated && databricks.context.loggedIn",
                "icon": "$(sync-ignored)"
            },
            {
                "command": "databricks.cluster.filterByAll",
                "title": "All",
                "enablement": "databricks.context.activated && databricks.context.loggedIn"
            },
            {
                "command": "databricks.cluster.filterByRunning",
                "title": "Running",
                "enablement": "databricks.context.activated && databricks.context.loggedIn"
            },
            {
                "command": "databricks.cluster.filterByMe",
                "title": "Created by me",
                "enablement": "databricks.context.activated && databricks.context.loggedIn"
            },
            {
                "command": "databricks.cluster.refresh",
                "icon": "$(refresh)",
                "title": "Refresh",
                "enablement": "databricks.context.activated && databricks.context.loggedIn"
            },
            {
                "command": "databricks.connection.attachSyncDestination",
                "title": "Configure sync destination",
                "category": "Databricks",
                "enablement": "databricks.context.activated && databricks.context.loggedIn",
                "icon": "$(gear)"
            },
            {
                "command": "databricks.connection.detachSyncDestination",
                "title": "Detach sync destination",
                "category": "Databricks",
                "enablement": "databricks.context.activated && databricks.context.loggedIn",
                "icon": "$(debug-disconnect)"
            },
            {
                "command": "databricks.run.runEditorContentsAsWorkflow",
                "title": "Run File as Workflow on Databricks",
                "category": "Databricks",
                "enablement": "!inDebugMode",
                "icon": "$(play)"
            },
            {
                "command": "databricks.run.runEditorContents",
                "title": "Upload and Run File on Databricks",
                "category": "Databricks",
                "enablement": "!inDebugMode",
                "icon": "$(play)"
            },
            {
                "command": "databricks.quickstart.open",
                "title": "Show Quickstart",
                "category": "Databricks"
            },
            {
                "command": "databricks.logs.openFolder",
                "title": "Open full logs",
                "category": "Databricks"
            },
            {
                "command": "databricks.autocomplete.configure",
                "title": "Configure autocomplete for Databricks globals",
                "category": "Databricks"
            },
            {
                "command": "databricks.cluster.start",
                "title": "Start Cluster",
                "icon": "$(debug-start)",
                "enablement": "databricks.context.activated && databricks.context.loggedIn",
                "category": "Databricks"
            },
            {
                "command": "databricks.cluster.stop",
                "title": "Stop Cluster",
                "icon": "$(debug-stop)",
                "enablement": "databricks.context.activated && databricks.context.loggedIn",
                "category": "Databricks"
            },
            {
                "command": "databricks.utils.openExternal",
                "title": "Open link externally",
                "icon": "$(link)",
                "category": "Databricks"
            },
            {
                "command": "databricks.wsfs.refresh",
                "title": "Refresh workspace filesystem view",
                "icon": "$(refresh)",
                "enablement": "databricks.context.activated && databricks.context.loggedIn && config.databricks.sync.destinationType == workspace",
                "category": "Databricks"
            },
            {
                "command": "databricks.wsfs.createFolder",
                "title": "Create Folder",
                "icon": "$(new-folder)",
                "enablement": "databricks.context.activated && databricks.context.loggedIn",
                "category": "Databricks"
            },
            {
                "command": "databricks.call",
                "title": "Call",
                "enablement": "databricks.context.activated && databricks.context.loggedIn",
                "category": "Databricks"
            },
            {
                "command": "databricks.notebookInitScript.verify",
                "title": "Verify Databricks notebook init scripts",
                "enablement": "databricks.context.activated && databricks.context.loggedIn",
                "category": "Databricks"
            }
        ],
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "databricksBar",
                    "title": "Databricks",
                    "icon": "resources/light/logo.svg"
                }
            ]
        },
        "views": {
            "databricksBar": [
                {
                    "id": "configurationView",
                    "name": "Configuration"
                },
                {
                    "id": "workspaceFsView",
                    "name": "Workspace explorer",
                    "when": "config.databricks.sync.destinationType == workspace && databricks.feature.views.workspace"
                },
                {
                    "id": "clusterView",
                    "when": "databricks.feature.views.cluster",
                    "name": "Clusters"
                }
            ]
        },
        "viewsWelcome": [
            {
                "view": "configurationView",
                "contents": "In order to connect to a cluster you first have to configure your Databricks workspace:\n[Configure Databricks](command:databricks.connection.configureWorkspace)\n[Show Quickstart](command:databricks.quickstart.open)\nTo learn more about how to use Databricks with VS Code [read our docs](https://docs.databricks.com/dev-tools/vscode-ext.html).",
                "when": "workspaceFolderCount > 0"
            },
            {
                "view": "configurationView",
                "contents": "Please open a folder to start using Databricks on VSCode.\n[Open Folder](command:vscode.openFolder)",
                "when": "workspaceFolderCount == 0"
            }
        ],
        "menus": {
            "view/title": [
                {
                    "command": "databricks.connection.configureWorkspace",
                    "when": "view == configurationView",
                    "group": "navigation@3"
                },
                {
                    "command": "databricks.quickstart.open",
                    "when": "view == configurationView"
                },
                {
                    "when": "view == clusterView",
                    "group": "navigation@1",
                    "submenu": "databricks.cluster.filter"
                },
                {
                    "command": "databricks.cluster.refresh",
                    "when": "view == clusterView",
                    "group": "navigation@2"
                },
                {
                    "command": "databricks.wsfs.refresh",
                    "when": "view == workspaceFsView",
                    "group": "navigation@1"
                },
                {
                    "command": "databricks.wsfs.createFolder",
                    "when": "view == workspaceFsView",
                    "group": "navigation@1"
                }
            ],
            "databricks.cluster.filter": [
                {
                    "command": "databricks.cluster.filterByAll"
                },
                {
                    "command": "databricks.cluster.filterByMe"
                },
                {
                    "command": "databricks.cluster.filterByRunning"
                }
            ],
            "view/item/context": [
                {
                    "command": "databricks.utils.openExternal",
                    "when": "view == configurationView && viewItem == workspace || view == configurationView && viewItem =~ /^.*cluster.*$/ || view == configurationView && viewItem =~ /^sync.*$/",
                    "group": "inline@1"
                },
                {
                    "command": "databricks.utils.openExternal",
                    "when": "view == clusterView && viewItem == cluster",
                    "group": "inline@1"
                },
                {
                    "command": "databricks.connection.attachCluster",
                    "when": "view == clusterView",
                    "group": "inline@2"
                },
                {
                    "command": "databricks.connection.configureWorkspace",
                    "when": "view == configurationView && viewItem == workspace",
                    "group": "inline@2"
                },
                {
                    "command": "databricks.connection.attachClusterQuickPick",
                    "when": "view == configurationView && viewItem == clusterDetached || view == configurationView && viewItem =~ /^databricks.cluster.*$/",
                    "group": "inline@2"
                },
                {
                    "command": "databricks.connection.attachSyncDestination",
                    "when": "view == configurationView && viewItem == syncDetached",
                    "group": "inline@2"
                },
                {
                    "command": "databricks.connection.attachSyncDestination",
                    "when": "view == configurationView && viewItem == syncStopped || view == configurationView && viewItem == syncRunning",
                    "group": "inline@2"
                },
                {
                    "command": "databricks.sync.start",
                    "when": "view == configurationView && viewItem == syncStopped",
                    "group": "inline@0"
                },
                {
                    "command": "databricks.sync.stop",
                    "when": "view == configurationView && viewItem == syncRunning",
                    "group": "inline@0"
                },
                {
                    "command": "databricks.cluster.stop",
                    "when": "view == configurationView && viewItem =~ /^databricks.cluster.(running|pending)$/",
                    "group": "inline@0"
                },
                {
                    "command": "databricks.cluster.start",
                    "when": "view == configurationView && viewItem == databricks.cluster.terminated",
                    "group": "inline@0"
                }
            ],
            "editor/title/run": [
                {
                    "command": "databricks.run.runEditorContents",
                    "when": "resourceLangId == python",
                    "group": "navigation@1"
                },
                {
                    "command": "databricks.run.runEditorContentsAsWorkflow",
                    "when": "resourceLangId == python || resourceLangId == scala || resourceLangId == r || resourceLangId == sql || resourceExtname == .ipynb",
                    "group": "navigation@1"
                }
            ],
            "commandPalette": [
                {
                    "command": "databricks.run.runEditorContents",
                    "when": "resourceLangId == python"
                },
                {
                    "command": "databricks.run.runEditorContentsAsWorkflow",
                    "when": "resourceLangId == python || resourceExtname == .ipynb"
                },
                {
                    "command": "databricks.wsfs.createFolder",
                    "when": "config.databricks.sync.destinationType == workspace"
                },
                {
                    "command": "databricks.wsfs.refresh",
                    "when": "config.databricks.sync.destinationType == workspace"
                },
                {
                    "command": "databricks.utils.openExternal",
                    "when": "false"
                },
                {
                    "command": "databricks.call",
                    "when": "false"
                }
            ],
            "explorer/context": [
                {
                    "command": "databricks.run.runEditorContents",
                    "when": "resourceLangId == python"
                },
                {
                    "command": "databricks.run.runEditorContentsAsWorkflow",
                    "when": "resourceLangId == python"
                }
            ]
        },
        "submenus": [
            {
                "id": "databricks.cluster.filter",
                "label": "Filter clusters ...",
                "icon": "$(filter)"
            }
        ],
        "taskDefinitions": [
            {
                "type": "databricks"
            }
        ],
        "problemMatchers": [
            {
                "name": "databricks-sync",
                "owner": "databricks",
                "fileLocation": "relative",
                "pattern": {
                    "regexp": "Putting (/Repos/.*)$",
                    "file": 1
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "Remote file sync location:",
                    "endsPattern": "Initial Sync Complete$"
                }
            }
        ],
        "debuggers": [
            {
                "type": "databricks",
                "languages": [
                    "python"
                ],
                "label": "Databricks",
                "configurationAttributes": {
                    "launch": {
                        "required": [
                            "program"
                        ],
                        "properties": {
                            "program": {
                                "type": "string",
                                "description": "Absolute path to a python file."
                            },
                            "args": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Command line arguments."
                            },
                            "env": {
                                "type": "object",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Environment variables."
                            }
                        }
                    }
                },
                "initialConfigurations": [
                    {
                        "type": "databricks",
                        "request": "launch",
                        "name": "Run on Databricks",
                        "program": "${file}",
                        "args": [],
                        "env": {}
                    }
                ],
                "configurationSnippets": [
                    {
                        "label": "Databricks: Launch",
                        "description": "A new configuration for running a user selected Python file on Databricks.",
                        "body": {
                            "type": "databricks",
                            "request": "launch",
                            "name": "Run on Databricks",
                            "program": "^\"\\${file}\"",
                            "args": []
                        }
                    }
                ]
            },
            {
                "type": "databricks-workflow",
                "languages": [
                    "python",
                    "sql",
                    "r",
                    "scala"
                ],
                "label": "Databricks Workflow",
                "configurationAttributes": {
                    "launch": {
                        "required": [
                            "program"
                        ],
                        "properties": {
                            "program": {
                                "type": "string",
                                "description": "Absolute path to a python file."
                            },
                            "parameters": {
                                "type": "object",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Values of the notebook widget parameters as specified by the key of the parameter."
                            },
                            "args": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Command line arguments for Python tasks."
                            }
                        }
                    }
                },
                "initialConfigurations": [
                    {
                        "type": "databricks-workflow",
                        "request": "launch",
                        "name": "Run on Databricks as Workflow",
                        "program": "${file}",
                        "parameters": {},
                        "args": []
                    }
                ],
                "configurationSnippets": [
                    {
                        "label": "Databricks: Launch as Workflow",
                        "description": "A new configuration for running a user selected Python file on Databricks as a workflow.",
                        "body": {
                            "type": "databricks-workflow",
                            "request": "launch",
                            "name": "Run on Databricks as a Workflow",
                            "program": "^\"\\${file}\"",
                            "parameters": {},
                            "args": []
                        }
                    }
                ]
            }
        ],
        "configuration": [
            {
                "title": "Databricks",
                "properties": {
                    "databricks.logs.maxFieldLength": {
                        "type": "number",
                        "default": 40,
                        "description": "The maximum length of each field displayed in logs outputs panel."
                    },
                    "databricks.logs.truncationDepth": {
                        "type": "number",
                        "default": 2,
                        "description": "The max depth of logs to show without truncation."
                    },
                    "databricks.logs.maxArrayLength": {
                        "type": "number",
                        "default": 2,
                        "description": "The maximum number of items to show for array fields."
                    },
                    "databricks.logs.enabled": {
                        "type": "boolean",
                        "default": true,
                        "description": "Enable/disable logging. Reload window for changes to take effect."
                    },
                    "databricks.clusters.onlyShowAccessibleClusters": {
                        "type": "boolean",
                        "default": false,
                        "description": "Enable/disable filtering for only accessible clusters (clusters on which the current user can run code)"
                    },
                    "databricks.sync.destinationType": {
                        "type": "string",
                        "default": "workspace",
                        "enum": [
                            "workspace",
                            "repo"
                        ],
                        "description": "Use a folder in Workspace or a Databricks Repo as sync destination (Reload for changes to take effect).",
                        "enumDescriptions": [
                            "Use a folder in Workspace as sync destination",
                            "Use a Repo as sync destination"
                        ]
                    },
                    "databricks.overrideDatabricksConfigFile": {
                        "type": "string",
                        "default": "",
                        "description": "Override location of .databrickscfg file (default: DATABRICKS_CONFIG_FILE environment variable or ~/.databrickscfg)"
                    },
                    "databricks.experiments.optInto": {
                        "type": "array",
                        "default": [],
                        "items": {
                            "enum": [
                                "notebooks.dbconnect",
                                "views.cluster",
                                "views.workspace"
                            ],
                            "enumDescriptions": [
                                "Limited local notebook support using DB Connect v2.",
                                "Show cluster view in the explorer.",
                                "Show workspace browser in the explorer."
                            ],
                            "type": "string"
                        },
                        "uniqueItems": true,
                        "description": "Opt into experimental features."
                    },
                    "databricks.python.envFile": {
                        "type": "string",
                        "default": "",
                        "description": "Similar to python.envFile. Absolute path to a file containing environment variable definitions."
                    },
                    "databricks.wsfs.rearrangeCells": {
                        "type": "boolean",
                        "default": true,
                        "description": "Enable/disable rearranging cells in wrapper files created when using `workspace` as the sync destination. **Note:** It is recommended to NOT disable this setting. If you do disable it, you will need to manually handle sys.path for local imports in your notebooks."
                    },
                    "databricks.ipythonDir": {
                        "type": "string",
                        "description": "Absolute path to a directory for storing IPython files. Defaults to IPYTHONDIR environment variable (if set) or ~/.ipython."
                    }
                }
            }
        ]
    },
    "extensionDependencies": [
        "ms-python.python",
        "ms-toolsai.jupyter"
    ],
    "vsce": {
        "dependencies": false,
        "useYarn": false
    },
    "cli": {
        "version": "0.227.0"
    },
    "scripts": {
        "vscode:prepublish": "rm -rf out && yarn run package:compile && yarn run package:wrappers:write && yarn run package:jupyter-init-script:write && yarn run package:copy-webview-toolkit && yarn run generate-telemetry",
        "package": "vsce package --baseContentUrl https://github.com/databricks/databricks-vscode/blob/${TAG:-main}/packages/databricks-vscode --baseImagesUrl https://raw.githubusercontent.com/databricks/databricks-vscode/${TAG:-main}/packages/databricks-vscode",
        "package:linux:x64": "./scripts/package-vsix.sh linux-x64",
        "package:linux:arm64": "./scripts/package-vsix.sh linux-arm64",
        "package:darwin:x64": "./scripts/package-vsix.sh darwin-x64",
        "package:darwin:arm64": "./scripts/package-vsix.sh darwin-arm64",
        "package:win32:x64": "./scripts/package-vsix.sh win32-x64",
        "package:win32:arm64": "./scripts/package-vsix.sh win32-arm64",
        "package:all": "yarn run package:linux:x64 && yarn run package:linux:arm64 && yarn run package:darwin:x64 && yarn run package:darwin:arm64 && yarn run package:win32:x64 && yarn run package:win32:arm64",
        "package:cli:fetch": "bash ./scripts/fetch-databricks-cli.sh ${CLI_ARCH:-}",
        "package:cli:link": "rm -f ./bin/databricks && mkdir -p bin && ln -s ../../../../cli/cli bin/databricks",
        "package:wrappers:write": "ts-node ./scripts/writeIpynbWrapper.ts -s ./resources/python/notebook.workflow-wrapper.py -o ./resources/python/generated/notebook.workflow-wrapper.json",
        "package:jupyter-init-script:write": "ts-node ./scripts/writeJupyterInitFileWithVersion.ts",
        "package:compile": "yarn run esbuild:base",
        "package:copy-webview-toolkit": "cp ./node_modules/@vscode/webview-ui-toolkit/dist/toolkit.js ./out/toolkit.js",
        "esbuild:base": "esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node --sourcemap --target=es2019",
        "build": "yarn run package:wrappers:write && yarn run package:jupyter-init-script:write && tsc --build --force",
        "watch": "yarn run package:wrappers:write && yarn run package:jupyter-init-script:write && yarn run package:copy-webview-toolkit && tsc --build --watch --force",
        "fix": "eslint src --ext ts --fix && prettier . --write",
        "test:lint": "eslint src --ext ts && prettier . -c",
        "test:unit": "yarn run build && node ./out/test/runTest.js",
        "test:integ:prepare": "yarn run package",
        "test:integ:run": "wdio run src/test/e2e/wdio.conf.ts",
        "test:integ:sdk": "ts-mocha --type-check 'src/sdk-extensions/**/*.integ.ts'",
        "test:integ": "yarn run test:integ:prepare && yarn run test:integ:run && yarn run test:integ:sdk",
        "test:cov": "nyc yarn run test:unit",
        "test": "yarn run test:lint && yarn run test:unit",
        "clean": "rm -rf node_modules out .vscode-test",
        "generate-notice": "../../scripts/generate_notice.sh",
        "generate-telemetry": "ts-node ./scripts/generateTelemetry.ts"
    },
    "dependencies": {
        "@databricks/databricks-sdk": "file:../../vendor/databricks-sdk.tgz",
        "@databricks/databricks-vscode-types": "workspace:^",
        "@vscode/debugadapter": "^1.61.0",
        "@vscode/extension-telemetry": "^0.8.1",
        "@vscode/webview-ui-toolkit": "^1.2.2",
        "add": "^2.0.6",
        "ansi-to-html": "^0.7.2",
        "bcryptjs": "^2.4.3",
        "triple-beam": "^1.4.1",
        "winston": "^3.10.0",
        "yaml": "^2.3.2"
    },
    "devDependencies": {
        "@istanbuljs/nyc-config-typescript": "^1.0.2",
        "@sinonjs/fake-timers": "^11.2.2",
        "@types/bcryptjs": "^2.4.2",
        "@types/chai": "^4.3.5",
        "@types/fs-extra": "^11.0.1",
        "@types/mocha": "^10.0.1",
        "@types/mock-require": "^2.0.1",
        "@types/node": "^20.4.2",
        "@types/sinonjs__fake-timers": "^8.1.2",
        "@types/tmp": "^0.2.3",
        "@types/triple-beam": "^1.3.2",
        "@types/vscode": "^1.69.1",
        "@types/yargs": "^17.0.24",
        "@typescript-eslint/eslint-plugin": "^6.0.0",
        "@typescript-eslint/parser": "^6.0.0",
        "@vscode/test-electron": "^2.3.8",
        "@wdio/cli": "^8.12.2",
        "@wdio/local-runner": "^8.12.1",
        "@wdio/mocha-framework": "^8.12.1",
        "@wdio/spec-reporter": "^8.12.2",
        "@wdio/types": "^8.10.4",
        "chai": "^4.3.7",
        "esbuild": "^0.19.4",
        "eslint": "^8.51.0",
        "fs-extra": "^11.1.1",
        "glob": "^10.3.3",
        "mocha": "^10.2.0",
        "mock-require": "^3.0.3",
        "nyc": "^15.1.0",
        "prettier": "^3.0.0",
        "tmp-promise": "^3.0.3",
        "ts-mocha": "^10.0.0",
        "ts-mockito": "^2.6.1",
        "ts-node": "^10.9.1",
        "typescript": "5.1.6",
        "vsce": "^2.15.0",
        "wdio-video-reporter": "^4.0.3",
        "wdio-vscode-service": "^5.2.3",
        "winston": "^3.10.0",
        "yargs": "^17.7.2"
    },
    "nyc": {
        "extends": "@istanbuljs/nyc-config-typescript",
        "check-coverage": false,
        "all": true,
        "skip-empty": true,
        "include": [
            "src/**/*.ts"
        ],
        "exclude": [
            "src/**/*.test.ts",
            "src/**/*.integ.ts"
        ],
        "reporter": [
            "lcov",
            "json"
        ],
        "report-dir": "coverage"
    }
}
