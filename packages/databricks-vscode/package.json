{
    "name": "databricks-vscode",
    "displayName": "Databricks for Visual Studio Code",
    "description": "IDE support for Databricks",
    "publisher": "databricks",
    "license": "Apache-2.0",
    "version": "0.0.1",
    "engines": {
        "vscode": "^1.69.1"
    },
    "categories": [
        "Data Science",
        "Machine Learning"
    ],
    "keywords": [
        "spark",
        "databricks",
        "machine learning",
        "ml",
        "data science",
        "ds",
        "lakehouse"
    ],
    "preview": true,
    "badges": [],
    "icon": "images/databricks-logo.png",
    "galleryBanner": {
        "theme": "light"
    },
    "homepage": "https://https://github.com/databricks/databricks-vscode/blob/main/README.md",
    "bugs": {
        "url": "https://github.com/databricks/databricks-vscode/issues"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/databricks/databricks-vscode.git"
    },
    "activationEvents": [
        "onCommand:databricks.connection.login",
        "onCommand:databricks.connection.logout",
        "onCommand:databricks.connection.configureProject",
        "onCommand:databricks.connection.openDatabricksConfigFile",
        "onCommand:databricks.connection.attachCluster",
        "onCommand:databricks.connection.attachClusterQuickPick",
        "onCommand:databricks.connection.detachCluster",
        "onCommand:databricks.connection.attachSyncDestination",
        "onCommand:databricks.connection.detachSyncDestination",
        "onCommand:databricks.sync.start",
        "onCommand:databricks.sync.startFull",
        "onCommand:databricks.sync.stop",
        "onCommand:databricks.cli.testBricksCli",
        "onCommand:databricks.cluster.refresh",
        "onCommand:databricks.cluster.filterByAll",
        "onCommand:databricks.cluster.filterByMe",
        "onCommand:databricks.cluster.filterByRunning",
        "onCommand:databricks.run.getProgramName",
        "onCommand:databricks.run.runEditorContentsAsWorkflow",
        "onCommand:databricks.run.runEditorContents",
        "onCommand:databricks.quickstart.open",
        "onView:configurationView",
        "onView:clusterView",
        "onTaskType:databricks",
        "onDebugResolve:databricks",
        "onDebugResolve:databricks-workflow"
    ],
    "main": "out/extension.js",
    "types": "out/extension.d.ts",
    "contributes": {
        "commands": [
            {
                "command": "databricks.connection.login",
                "title": "Databricks: Login"
            },
            {
                "command": "databricks.connection.logout",
                "title": "Databricks: Logout"
            },
            {
                "command": "databricks.connection.configureProject",
                "icon": "$(gear)",
                "title": "Databricks: Configure project"
            },
            {
                "command": "databricks.connection.openDatabricksConfigFile",
                "title": "Databricks: Open Databricks configuration file"
            },
            {
                "command": "databricks.connection.attachCluster",
                "title": "Attach cluster",
                "icon": "$(plug)"
            },
            {
                "command": "databricks.connection.attachClusterQuickPick",
                "title": "Attach cluster",
                "icon": "$(plug)"
            },
            {
                "command": "databricks.connection.detachCluster",
                "title": "Detach cluster",
                "icon": "$(debug-disconnect)"
            },
            {
                "command": "databricks.sync.start",
                "title": "Databricks: Start synchronization",
                "icon": "$(sync)"
            },
            {
                "command": "databricks.sync.startFull",
                "title": "Databricks: Start synchronization (full sync)",
                "icon": "$(sync)"
            },
            {
                "command": "databricks.sync.stop",
                "title": "Databricks: Stop synchronization",
                "icon": "$(sync-ignored)"
            },
            {
                "command": "databricks.cli.testBricksCli",
                "title": "Databricks: test bricks cli"
            },
            {
                "command": "databricks.cluster.filterByAll",
                "title": "All"
            },
            {
                "command": "databricks.cluster.filterByRunning",
                "title": "Running"
            },
            {
                "command": "databricks.cluster.filterByMe",
                "title": "Created by me"
            },
            {
                "command": "databricks.cluster.refresh",
                "icon": "$(refresh)",
                "title": "Refresh"
            },
            {
                "command": "databricks.connection.attachSyncDestination",
                "title": "Attach workspace",
                "icon": "$(plug)"
            },
            {
                "command": "databricks.connection.detachSyncDestination",
                "title": "Detach workspace",
                "icon": "$(debug-disconnect)"
            },
            {
                "command": "databricks.run.runEditorContentsAsWorkflow",
                "title": "Run File as Workflow on Databricks",
                "category": "Databricks",
                "enablement": "!inDebugMode",
                "icon": "$(play)"
            },
            {
                "command": "databricks.run.runEditorContents",
                "title": "Run File on Databricks",
                "category": "Databricks",
                "enablement": "!inDebugMode",
                "icon": "$(play)"
            },
            {
                "command": "databricks.quickstart.open",
                "title": "Databricks: Open Quickstart"
            },
            {
                "command": "databricks.cluster.start",
                "title": "Start Cluster",
                "icon": "$(debug-start)"
            },
            {
                "command": "databricks.cluster.stop",
                "title": "Stop Cluster",
                "icon": "$(debug-stop)"
            },
            {
                "command": "databricks.utils.openExternal",
                "title": "Open link externally",
                "icon": "$(link)"
            }
        ],
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "databricksBar",
                    "title": "Databricks",
                    "icon": "resources/light/logo.svg"
                }
            ]
        },
        "views": {
            "databricksBar": [
                {
                    "id": "configurationView",
                    "name": "Configuration"
                },
                {
                    "id": "clusterView",
                    "name": "Clusters"
                }
            ]
        },
        "viewsWelcome": [
            {
                "view": "configurationView",
                "contents": "In order to connect to a cluster you first have to configure your Databricks workspace:\n[Configure Databricks](command:databricks.connection.configureProject)\nTo learn more about how to use Databricks with VS Code [read our docs](https://github.com/databricks/databricks-vscode).",
                "when": "workspaceFolderCount > 0"
            },
            {
                "view": "configurationView",
                "contents": "Please open a folder to start using Databricks on VSCode.\n[Open Folder](command:vscode.openFolder)",
                "when": "workspaceFolderCount == 0"
            }
        ],
        "menus": {
            "view/title": [
                {
                    "command": "databricks.connection.configureProject",
                    "when": "view == configurationView",
                    "group": "navigation@3"
                },
                {
                    "when": "view == clusterView",
                    "group": "navigation@1",
                    "submenu": "databricks.cluster.filter"
                },
                {
                    "command": "databricks.cluster.refresh",
                    "when": "view == clusterView",
                    "group": "navigation@2"
                }
            ],
            "databricks.cluster.filter": [
                {
                    "command": "databricks.cluster.filterByAll"
                },
                {
                    "command": "databricks.cluster.filterByMe"
                },
                {
                    "command": "databricks.cluster.filterByRunning"
                }
            ],
            "view/item/context": [
                {
                    "command": "databricks.connection.attachCluster",
                    "when": "view == clusterView",
                    "group": "inline@1"
                },
                {
                    "command": "databricks.connection.configureProject",
                    "when": "view == configurationView && viewItem == profile",
                    "group": "inline@1"
                },
                {
                    "command": "databricks.connection.attachClusterQuickPick",
                    "when": "view == configurationView && viewItem == clusterDetached",
                    "group": "inline@1"
                },
                {
                    "command": "databricks.connection.detachCluster",
                    "when": "view == configurationView && viewItem == clusterRunning || view == configurationView && viewItem == clusterStopped || view == configurationView && viewItem == clusterPending",
                    "group": "inline@1"
                },
                {
                    "command": "databricks.connection.attachSyncDestination",
                    "when": "view == configurationView && viewItem == syncDetached",
                    "group": "inline@0"
                },
                {
                    "command": "databricks.connection.detachSyncDestination",
                    "when": "view == configurationView && viewItem == syncStopped || view == configurationView && viewItem == syncRunning",
                    "group": "inline@0"
                },
                {
                    "command": "databricks.sync.start",
                    "when": "view == configurationView && viewItem == syncStopped",
                    "group": "inline@0"
                },
                {
                    "command": "databricks.sync.stop",
                    "when": "view == configurationView && viewItem == syncRunning",
                    "group": "inline@0"
                },
                {
                    "command": "databricks.cluster.stop",
                    "when": "view == configurationView && viewItem == clusterRunning || view == configurationView && viewItem == clusterPending",
                    "group": "inline@0"
                },
                {
                    "command": "databricks.cluster.start",
                    "when": "view == configurationView && viewItem == clusterStopped",
                    "group": "inline@0"
                },
                {
                    "command": "databricks.utils.openExternal",
                    "when": "view == configurationView && viewItem =~ /^.*databricks-link.*$/ || view == clusterView && viewItem =~ /^.*databricks-link.*$/",
                    "group": "inline@0"
                }
            ],
            "editor/title/run": [
                {
                    "command": "databricks.run.runEditorContents",
                    "when": "resourceLangId == python",
                    "group": "navigation@1"
                },
                {
                    "command": "databricks.run.runEditorContentsAsWorkflow",
                    "when": "resourceLangId == python",
                    "group": "navigation@1"
                }
            ],
            "commandPalette": [
                {
                    "command": "databricks.run.runEditorContents",
                    "when": "resourceLangId == python"
                },
                {
                    "command": "databricks.run.runEditorContentsAsWorkflow",
                    "when": "resourceLangId == python"
                }
            ]
        },
        "submenus": [
            {
                "id": "databricks.cluster.filter",
                "label": "Filter clusters ...",
                "icon": "$(filter)"
            }
        ],
        "taskDefinitions": [
            {
                "type": "databricks",
                "required": [
                    "task"
                ],
                "properties": {
                    "task": {
                        "type": "string",
                        "enum": [
                            "sync"
                        ],
                        "default": "sync"
                    }
                }
            }
        ],
        "problemMatchers": [
            {
                "name": "bricks-sync",
                "owner": "bricks",
                "fileLocation": "relative",
                "pattern": {
                    "regexp": "Putting (/Repos/.*)$",
                    "file": 1
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "Syncing from",
                    "endsPattern": "Done(\\. Watching for changes\\.\\.\\.)$"
                }
            }
        ],
        "debuggers": [
            {
                "type": "databricks",
                "languages": [
                    "python"
                ],
                "label": "Databricks",
                "configurationAttributes": {
                    "launch": {
                        "required": [
                            "program"
                        ],
                        "properties": {
                            "program": {
                                "type": "string",
                                "description": "Absolute path to a python file."
                            },
                            "args": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Command line arguments."
                            }
                        }
                    }
                },
                "initialConfigurations": [
                    {
                        "type": "databricks",
                        "request": "launch",
                        "name": "Run on Databricks",
                        "program": "${file}",
                        "args": [],
                        "preLaunchTask": "databricks: sync"
                    }
                ],
                "configurationSnippets": [
                    {
                        "label": "Databricks: Launch",
                        "description": "A new configuration for running a user selected Python file on Databricks.",
                        "body": {
                            "type": "databricks",
                            "request": "launch",
                            "name": "Run on Databricks",
                            "program": "^\"\\${file}\"",
                            "args": [],
                            "preLaunchTask": "databricks: sync"
                        }
                    }
                ]
            },
            {
                "type": "databricks-workflow",
                "languages": [
                    "python"
                ],
                "label": "Databricks Workflow",
                "configurationAttributes": {
                    "launch": {
                        "required": [
                            "program"
                        ],
                        "properties": {
                            "program": {
                                "type": "string",
                                "description": "Absolute path to a python file."
                            },
                            "parameters": {
                                "type": "object",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Values of the notebook widget parameters as specified by the key of the parameter."
                            },
                            "args": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Command line arguments for Python tasks."
                            }
                        }
                    }
                },
                "initialConfigurations": [
                    {
                        "type": "databricks-workflow",
                        "request": "launch",
                        "name": "Run on Databricks as Workflow",
                        "program": "${file}",
                        "parameters": {},
                        "args": [],
                        "preLaunchTask": "databricks: sync"
                    }
                ],
                "configurationSnippets": [
                    {
                        "label": "Databricks: Launch as Workflow",
                        "description": "A new configuration for running a user selected Python file on Databricks as a workflow.",
                        "body": {
                            "type": "databricks-workflow",
                            "request": "launch",
                            "name": "Run on Databricks as a Workflow",
                            "program": "^\"\\${file}\"",
                            "parameters": {},
                            "args": [],
                            "preLaunchTask": "databricks: sync"
                        }
                    }
                ]
            }
        ]
    },
    "vsce": {
        "dependencies": false,
        "useYarn": false
    },
    "scripts": {
        "vscode:prepublish": "rm -rf out && yarn run package:compile && yarn run package:copy-webview-toolkit",
        "package": "vsce package",
        "package:cli:fetch": "BRICKS_VERSION=v0.0.4 && bash ./scripts/fetch-bricks-cli.sh ${BRICKS_VERSION} ${BRICKS_ARCH:-}",
        "package:cli:link": "rm -f ./bin/bricks && ln -s ../../../../bricks/bricks bin",
        "package:compile": "yarn run esbuild:base --minify",
        "package:copy-webview-toolkit": "cp ./node_modules/@vscode/webview-ui-toolkit/dist/toolkit.js ./out/toolkit.js",
        "esbuild:base": "esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
        "build": "tsc",
        "watch": "yarn run package:copy-webview-toolkit && tsc -w",
        "fix": "prettier . --write",
        "test:lint": "eslint src --ext ts && prettier . -c",
        "test:unit": "yarn run build && node ./out/test/runTest.js",
        "test:integ:clean": "yarn run clean && rm -rf /tmp/vscode-test-databricks /tmp/databricks-vscode-test-extensions",
        "test:integ:prepare": "CODE_VERSION=1.69.1 && yarn run package && extest get-vscode --code_version $CODE_VERSION --storage /tmp/vscode-test-databricks && extest get-chromedriver --code_version 1.69.1 --storage /tmp/vscode-test-databricks",
        "test:integ:install-vsix": "extest install-vsix --storage /tmp/vscode-test-databricks -f databricks-vscode*.vsix -e /tmp/databricks-vscode-test-extensions",
        "test:integ:run": "yarn run build && node out/test/e2e/scripts/e2e.js -e /tmp/databricks-vscode-test-extensions --storage /tmp/vscode-test-databricks --code_settings src/test/e2e/settings.json 'out/**/*.e2e.js'",
        "test:integ": "yarn run test:integ:prepare && yarn run test:integ:install-vsix && yarn run test:integ:run",
        "test:cov": "nyc yarn run test:unit",
        "test": "yarn run test:lint && yarn run test:unit",
        "clean": "rm -rf node_modules out .vscode-test"
    },
    "dependencies": {
        "@databricks/databricks-sdk": "*",
        "@databricks/databricks-vscode-types": "workspace:^",
        "@vscode/debugadapter": "^1.57.0",
        "@vscode/webview-ui-toolkit": "^1.0.1"
    },
    "devDependencies": {
        "@istanbuljs/nyc-config-typescript": "^1.0.2",
        "@types/glob": "^8.0.0",
        "@types/mocha": "^9.1.1",
        "@types/node": "^18.7.17",
        "@types/tmp": "^0.2.3",
        "@types/vscode": "^1.69.0",
        "@typescript-eslint/eslint-plugin": "^5.37.0",
        "@typescript-eslint/parser": "^5.37.0",
        "@vscode/test-electron": "^2.1.5",
        "esbuild": "^0.15.7",
        "eslint": "^8.23.1",
        "glob": "^8.0.3",
        "mocha": "^10.0.0",
        "nyc": "^15.1.0",
        "prettier": "^2.7.1",
        "tmp-promise": "^3.0.3",
        "ts-mockito": "^2.6.1",
        "typescript": "^4.8.3",
        "vsce": "^2.11.0",
        "vscode-extension-tester": "^4.4.1",
        "winston": "^3.8.2"
    },
    "nyc": {
        "extends": "@istanbuljs/nyc-config-typescript",
        "check-coverage": false,
        "all": true,
        "skip-empty": true,
        "include": [
            "src/**/*.ts"
        ],
        "exclude": [
            "src/**/*.test.ts",
            "src/**/*.integ.ts"
        ],
        "reporter": [
            "lcov",
            "json"
        ],
        "report-dir": "coverage"
    }
}
